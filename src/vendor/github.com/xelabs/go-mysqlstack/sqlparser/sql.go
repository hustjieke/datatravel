//line sql.y:18
package sqlparser

import __yyfmt__ "fmt"

//line sql.y:18
func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex interface{}, ddl *DDL) {
	yylex.(*Tokenizer).partialDDL = ddl
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

func forceEOF(yylex interface{}) {
	yylex.(*Tokenizer).ForceEOF = true
}

//line sql.y:50
type yySymType struct {
	yys               int
	empty             struct{}
	statement         Statement
	selStmt           SelectStatement
	ddl               *DDL
	ins               *Insert
	byt               byte
	bytes             []byte
	bytes2            [][]byte
	str               string
	strs              []string
	selectExprs       SelectExprs
	selectExpr        SelectExpr
	columns           Columns
	colName           *ColName
	tableExprs        TableExprs
	tableExpr         TableExpr
	tableName         TableName
	indexHints        *IndexHints
	expr              Expr
	exprs             Exprs
	boolVal           BoolVal
	colTuple          ColTuple
	values            Values
	valTuple          ValTuple
	subquery          *Subquery
	whens             []*When
	when              *When
	orderBy           OrderBy
	order             *Order
	limit             *Limit
	updateExprs       UpdateExprs
	updateExpr        *UpdateExpr
	setExprs          SetExprs
	setExpr           *SetExpr
	colIdent          ColIdent
	colIdents         []ColIdent
	tableIdent        TableIdent
	convertType       *ConvertType
	aliasedTableName  *AliasedTableExpr
	TableSpec         *TableSpec
	TableOptions      TableOptions
	columnType        ColumnType
	colKeyOpt         ColumnKeyOption
	optVal            *SQLVal
	LengthScaleOption LengthScaleOption
	columnDefinition  *ColumnDefinition
	indexDefinition   *IndexDefinition
	indexInfo         *IndexInfo
	indexColumn       *IndexColumn
	indexColumns      []*IndexColumn
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const INSERT = 57349
const UPDATE = 57350
const DELETE = 57351
const FROM = 57352
const WHERE = 57353
const GROUP = 57354
const HAVING = 57355
const ORDER = 57356
const BY = 57357
const LIMIT = 57358
const OFFSET = 57359
const FOR = 57360
const ALL = 57361
const DISTINCT = 57362
const AS = 57363
const EXISTS = 57364
const ASC = 57365
const DESC = 57366
const INTO = 57367
const DUPLICATE = 57368
const KEY = 57369
const DEFAULT = 57370
const SET = 57371
const LOCK = 57372
const FULL = 57373
const VALUES = 57374
const LAST_INSERT_ID = 57375
const NEXT = 57376
const VALUE = 57377
const SHARE = 57378
const MODE = 57379
const SQL_NO_CACHE = 57380
const SQL_CACHE = 57381
const JOIN = 57382
const STRAIGHT_JOIN = 57383
const LEFT = 57384
const RIGHT = 57385
const INNER = 57386
const OUTER = 57387
const CROSS = 57388
const NATURAL = 57389
const USE = 57390
const FORCE = 57391
const ON = 57392
const ID = 57393
const HEX = 57394
const STRING = 57395
const INTEGRAL = 57396
const FLOAT = 57397
const HEXNUM = 57398
const VALUE_ARG = 57399
const LIST_ARG = 57400
const COMMENT = 57401
const COMMENT_KEYWORD = 57402
const NULL = 57403
const TRUE = 57404
const FALSE = 57405
const OFF = 57406
const OR = 57407
const AND = 57408
const NOT = 57409
const BETWEEN = 57410
const CASE = 57411
const WHEN = 57412
const THEN = 57413
const ELSE = 57414
const END = 57415
const LE = 57416
const GE = 57417
const NE = 57418
const NULL_SAFE_EQUAL = 57419
const IS = 57420
const LIKE = 57421
const REGEXP = 57422
const IN = 57423
const SHIFT_LEFT = 57424
const SHIFT_RIGHT = 57425
const DIV = 57426
const MOD = 57427
const UNARY = 57428
const COLLATE = 57429
const BINARY = 57430
const INTERVAL = 57431
const JSON_EXTRACT_OP = 57432
const JSON_UNQUOTE_EXTRACT_OP = 57433
const CREATE = 57434
const ALTER = 57435
const DROP = 57436
const RENAME = 57437
const ANALYZE = 57438
const ADD = 57439
const MODIFY = 57440
const TABLE = 57441
const INDEX = 57442
const VIEW = 57443
const TO = 57444
const IGNORE = 57445
const IF = 57446
const UNIQUE = 57447
const USING = 57448
const PRIMARY = 57449
const COLUMN = 57450
const SHOW = 57451
const DESCRIBE = 57452
const EXPLAIN = 57453
const DATE = 57454
const ESCAPE = 57455
const REPAIR = 57456
const OPTIMIZE = 57457
const TRUNCATE = 57458
const BIT = 57459
const TINYINT = 57460
const SMALLINT = 57461
const MEDIUMINT = 57462
const INT = 57463
const INTEGER = 57464
const BIGINT = 57465
const INTNUM = 57466
const REAL = 57467
const DOUBLE = 57468
const FLOAT_TYPE = 57469
const DECIMAL = 57470
const NUMERIC = 57471
const TIME = 57472
const TIMESTAMP = 57473
const DATETIME = 57474
const YEAR = 57475
const CHAR = 57476
const VARCHAR = 57477
const BOOL = 57478
const CHARACTER = 57479
const VARBINARY = 57480
const NCHAR = 57481
const CHARSET = 57482
const TEXT = 57483
const TINYTEXT = 57484
const MEDIUMTEXT = 57485
const LONGTEXT = 57486
const BLOB = 57487
const TINYBLOB = 57488
const MEDIUMBLOB = 57489
const LONGBLOB = 57490
const JSON = 57491
const ENUM = 57492
const NULLX = 57493
const AUTO_INCREMENT = 57494
const APPROXNUM = 57495
const SIGNED = 57496
const UNSIGNED = 57497
const ZEROFILL = 57498
const DATABASES = 57499
const TABLES = 57500
const VITESS_KEYSPACES = 57501
const VITESS_SHARDS = 57502
const VSCHEMA_TABLES = 57503
const WARNINGS = 57504
const VARIABLES = 57505
const EVENTS = 57506
const BINLOG = 57507
const GTID = 57508
const STATUS = 57509
const COLUMNS = 57510
const CURRENT_TIMESTAMP = 57511
const DATABASE = 57512
const CURRENT_DATE = 57513
const CURRENT_TIME = 57514
const LOCALTIME = 57515
const LOCALTIMESTAMP = 57516
const UTC_DATE = 57517
const UTC_TIME = 57518
const UTC_TIMESTAMP = 57519
const REPLACE = 57520
const CONVERT = 57521
const CAST = 57522
const GROUP_CONCAT = 57523
const SEPARATOR = 57524
const MATCH = 57525
const AGAINST = 57526
const BOOLEAN = 57527
const LANGUAGE = 57528
const WITH = 57529
const QUERY = 57530
const EXPANSION = 57531
const UNUSED = 57532
const PARTITION = 57533
const PARTITIONS = 57534
const HASH = 57535
const XA = 57536
const ENGINES = 57537
const VERSIONS = 57538
const PROCESSLIST = 57539
const QUERYZ = 57540
const TXNZ = 57541
const KILL = 57542
const ENGINE = 57543
const BEGIN = 57544
const START = 57545
const TRANSACTION = 57546
const COMMIT = 57547
const ROLLBACK = 57548
const GLOBAL = 57549
const SESSION = 57550
const NAMES = 57551

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"KEY",
	"DEFAULT",
	"SET",
	"LOCK",
	"FULL",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"'('",
	"','",
	"')'",
	"ID",
	"HEX",
	"STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"NULL",
	"TRUE",
	"FALSE",
	"OFF",
	"OR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"MODIFY",
	"TABLE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"UNIQUE",
	"USING",
	"PRIMARY",
	"COLUMN",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"BIGINT",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"CHAR",
	"VARCHAR",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"CHARSET",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"ENUM",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"DATABASES",
	"TABLES",
	"VITESS_KEYSPACES",
	"VITESS_SHARDS",
	"VSCHEMA_TABLES",
	"WARNINGS",
	"VARIABLES",
	"EVENTS",
	"BINLOG",
	"GTID",
	"STATUS",
	"COLUMNS",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"GROUP_CONCAT",
	"SEPARATOR",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"PARTITION",
	"PARTITIONS",
	"HASH",
	"XA",
	"ENGINES",
	"VERSIONS",
	"PROCESSLIST",
	"QUERYZ",
	"TXNZ",
	"KILL",
	"ENGINE",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"GLOBAL",
	"SESSION",
	"NAMES",
	"';'",
}
var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 3,
	5, 25,
	-2, 4,
	-1, 276,
	78, 590,
	-2, 38,
	-1, 281,
	78, 486,
	-2, 437,
	-1, 376,
	106, 473,
	-2, 469,
	-1, 377,
	106, 474,
	-2, 470,
	-1, 550,
	5, 25,
	-2, 413,
	-1, 683,
	106, 476,
	-2, 472,
	-1, 794,
	5, 26,
	-2, 292,
	-1, 818,
	5, 26,
	-2, 414,
	-1, 904,
	5, 25,
	-2, 416,
	-1, 1006,
	5, 26,
	-2, 417,
}

const yyPrivate = 57344

const yyLast = 6850

var yyAct = [...]int{

	377, 509, 1038, 895, 679, 325, 330, 352, 553, 833,
	894, 944, 853, 590, 958, 714, 955, 874, 255, 715,
	786, 52, 354, 603, 62, 667, 677, 277, 778, 70,
	291, 554, 565, 674, 147, 242, 68, 711, 576, 644,
	561, 695, 319, 243, 682, 379, 328, 274, 385, 264,
	56, 452, 355, 46, 272, 900, 620, 508, 3, 332,
	242, 51, 70, 247, 570, 676, 280, 567, 599, 279,
	619, 289, 1050, 1037, 58, 59, 60, 61, 1049, 1029,
	244, 1047, 246, 1036, 248, 249, 250, 251, 252, 253,
	1028, 887, 938, 838, 839, 840, 622, 130, 131, 46,
	146, 841, 308, 973, 254, 618, 314, 260, 631, 312,
	306, 741, 583, 916, 730, 269, 1014, 475, 474, 484,
	485, 477, 478, 479, 480, 481, 482, 483, 476, 910,
	979, 486, 859, 591, 242, 242, 933, 931, 298, 578,
	971, 766, 765, 797, 317, 764, 299, 1001, 1003, 129,
	875, 294, 615, 613, 609, 759, 612, 614, 763, 463,
	462, 761, 1024, 965, 1023, 578, 292, 1022, 132, 295,
	297, 134, 133, 309, 923, 877, 464, 821, 584, 304,
	498, 499, 566, 792, 310, 311, 790, 313, 724, 302,
	303, 879, 735, 883, 507, 878, 617, 876, 392, 486,
	846, 464, 881, 477, 478, 479, 480, 481, 482, 483,
	476, 616, 880, 486, 798, 461, 889, 882, 884, 1002,
	967, 476, 443, 842, 486, 830, 762, 731, 723, 577,
	591, 396, 1015, 696, 575, 972, 574, 970, 611, 479,
	480, 481, 482, 483, 476, 1027, 739, 486, 462, 621,
	847, 760, 651, 758, 1010, 577, 463, 462, 536, 537,
	610, 322, 380, 521, 464, 466, 649, 650, 648, 242,
	293, 301, 242, 464, 70, 463, 462, 387, 580, 70,
	381, 279, 891, 799, 581, 696, 398, 804, 920, 315,
	919, 316, 464, 911, 242, 49, 753, 242, 242, 242,
	465, 1025, 242, 463, 462, 647, 242, 752, 242, 242,
	242, 742, 383, 46, 1008, 245, 463, 462, 382, 982,
	464, 771, 772, 773, 390, 128, 918, 393, 395, 467,
	463, 462, 769, 464, 668, 751, 669, 296, 976, 500,
	501, 502, 503, 504, 505, 1044, 318, 464, 20, 637,
	639, 640, 445, 446, 447, 638, 942, 318, 913, 912,
	510, 451, 292, 454, 455, 456, 459, 519, 474, 484,
	485, 477, 478, 479, 480, 481, 482, 483, 476, 495,
	497, 486, 784, 318, 268, 70, 861, 496, 858, 835,
	242, 831, 542, 242, 827, 70, 852, 851, 555, 556,
	538, 564, 279, 259, 736, 506, 849, 848, 511, 512,
	513, 514, 515, 516, 517, 727, 520, 522, 522, 522,
	522, 522, 522, 522, 522, 530, 531, 532, 533, 670,
	592, 593, 594, 540, 444, 571, 300, 558, 820, 318,
	318, 551, 563, 685, 318, 552, 550, 404, 403, 22,
	242, 975, 974, 843, 242, 712, 685, 722, 53, 560,
	813, 722, 816, 562, 942, 605, 22, 634, 635, 850,
	641, 642, 548, 784, 643, 549, 630, 652, 653, 654,
	655, 656, 657, 658, 659, 660, 661, 662, 663, 664,
	665, 666, 645, 625, 49, 624, 784, 22, 627, 628,
	629, 394, 784, 632, 722, 623, 70, 601, 602, 626,
	534, 49, 49, 673, 585, 279, 510, 261, 604, 690,
	691, 70, 63, 903, 732, 600, 595, 539, 697, 646,
	946, 949, 950, 951, 947, 681, 948, 952, 1018, 380,
	1019, 546, 49, 837, 712, 671, 672, 607, 449, 994,
	46, 1042, 70, 992, 995, 555, 556, 713, 993, 720,
	1021, 1020, 49, 991, 511, 700, 693, 726, 996, 687,
	950, 951, 716, 990, 683, 265, 266, 1035, 688, 689,
	703, 704, 692, 725, 709, 770, 633, 708, 921, 353,
	586, 587, 588, 589, 721, 746, 699, 401, 701, 702,
	743, 744, 717, 391, 46, 596, 597, 598, 242, 718,
	829, 710, 738, 1012, 734, 946, 949, 950, 951, 947,
	728, 948, 952, 745, 240, 747, 748, 749, 1011, 523,
	524, 525, 526, 527, 528, 529, 475, 474, 484, 485,
	477, 478, 479, 480, 481, 482, 483, 476, 386, 270,
	486, 901, 755, 684, 686, 775, 776, 777, 320, 733,
	814, 606, 384, 754, 448, 954, 386, 698, 707, 767,
	321, 645, 262, 263, 768, 256, 706, 779, 985, 402,
	70, 257, 53, 984, 941, 562, 453, 788, 774, 458,
	793, 484, 485, 477, 478, 479, 480, 481, 482, 483,
	476, 805, 307, 486, 305, 271, 242, 962, 646, 344,
	343, 345, 346, 347, 348, 917, 460, 55, 349, 57,
	50, 1, 510, 270, 270, 832, 573, 568, 824, 555,
	556, 290, 279, 70, 791, 572, 803, 750, 969, 915,
	834, 783, 579, 822, 826, 740, 582, 729, 569, 828,
	1009, 815, 825, 836, 823, 70, 737, 242, 407, 801,
	408, 811, 279, 406, 475, 474, 484, 485, 477, 478,
	479, 480, 481, 482, 483, 476, 844, 845, 486, 410,
	409, 405, 855, 135, 273, 865, 866, 953, 70, 860,
	957, 683, 785, 70, 65, 788, 757, 862, 279, 756,
	279, 857, 608, 494, 863, 705, 278, 854, 869, 890,
	397, 868, 856, 719, 242, 781, 535, 886, 681, 782,
	873, 70, 70, 888, 885, 872, 378, 983, 906, 907,
	893, 940, 794, 795, 796, 871, 902, 800, 802, 716,
	518, 908, 806, 694, 807, 808, 809, 810, 331, 636,
	342, 339, 341, 892, 340, 541, 547, 683, 270, 468,
	329, 270, 817, 818, 819, 323, 899, 1000, 897, 717,
	922, 388, 905, 898, 945, 943, 896, 904, 812, 457,
	937, 1013, 545, 442, 23, 54, 270, 270, 270, 267,
	19, 450, 14, 13, 12, 270, 939, 270, 270, 270,
	242, 242, 27, 929, 10, 9, 8, 7, 6, 5,
	70, 4, 258, 21, 70, 2, 18, 279, 17, 963,
	16, 834, 966, 968, 70, 15, 716, 11, 867, 0,
	0, 279, 0, 0, 0, 0, 0, 855, 0, 0,
	936, 978, 980, 242, 242, 242, 242, 987, 0, 989,
	0, 873, 956, 986, 242, 988, 717, 242, 46, 898,
	242, 0, 854, 964, 997, 0, 70, 0, 0, 555,
	556, 1005, 909, 1007, 1004, 0, 0, 0, 0, 270,
	0, 557, 559, 0, 0, 0, 0, 1017, 0, 1016,
	510, 0, 0, 0, 0, 899, 899, 899, 899, 0,
	0, 0, 898, 898, 898, 898, 0, 0, 0, 956,
	0, 0, 0, 914, 687, 0, 898, 924, 0, 925,
	0, 0, 0, 1030, 1031, 0, 0, 0, 0, 0,
	934, 935, 0, 70, 70, 70, 1040, 1041, 0, 270,
	1039, 1039, 1039, 270, 0, 70, 0, 0, 0, 0,
	0, 0, 1048, 0, 926, 927, 0, 928, 0, 0,
	930, 0, 932, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1032, 1033, 1034, 0, 0,
	0, 0, 981, 0, 0, 0, 0, 22, 47, 24,
	25, 0, 0, 0, 0, 0, 680, 559, 0, 0,
	999, 0, 680, 680, 0, 42, 680, 0, 0, 1006,
	26, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	680, 680, 680, 680, 0, 0, 0, 0, 0, 34,
	0, 0, 49, 0, 0, 680, 0, 0, 557, 0,
	0, 0, 0, 470, 0, 473, 0, 0, 0, 0,
	0, 487, 488, 489, 490, 491, 492, 493, 1026, 471,
	472, 469, 475, 474, 484, 485, 477, 478, 479, 480,
	481, 482, 483, 476, 0, 0, 486, 0, 0, 0,
	0, 0, 0, 1043, 0, 1045, 1046, 0, 0, 0,
	28, 29, 30, 0, 32, 0, 0, 270, 0, 0,
	0, 0, 0, 0, 0, 0, 101, 33, 43, 36,
	787, 0, 44, 45, 31, 82, 0, 0, 0, 0,
	0, 0, 92, 0, 0, 107, 98, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 69, 0, 789, 0, 0, 0, 0,
	0, 0, 77, 0, 0, 0, 0, 463, 462, 0,
	0, 0, 0, 0, 0, 680, 0, 0, 0, 0,
	0, 0, 0, 0, 464, 0, 48, 0, 0, 0,
	0, 0, 0, 680, 0, 0, 0, 0, 0, 0,
	0, 0, 35, 0, 0, 270, 0, 0, 37, 0,
	38, 39, 0, 41, 40, 0, 0, 121, 0, 0,
	0, 0, 557, 103, 559, 0, 0, 0, 78, 0,
	106, 102, 116, 73, 114, 109, 96, 88, 89, 72,
	0, 105, 81, 86, 80, 100, 111, 112, 79, 126,
	76, 120, 75, 0, 119, 99, 270, 110, 115, 97,
	94, 74, 113, 95, 93, 90, 83, 0, 0, 0,
	108, 117, 127, 0, 0, 122, 123, 124, 0, 0,
	0, 0, 0, 0, 680, 0, 0, 0, 0, 0,
	559, 680, 0, 0, 413, 0, 0, 0, 0, 0,
	71, 0, 91, 125, 104, 85, 118, 0, 0, 0,
	0, 0, 0, 270, 0, 0, 0, 84, 0, 425,
	0, 0, 0, 87, 430, 431, 432, 433, 434, 435,
	436, 0, 437, 438, 439, 440, 441, 426, 427, 428,
	429, 411, 412, 0, 0, 414, 0, 0, 415, 416,
	417, 418, 419, 420, 421, 422, 423, 424, 0, 0,
	0, 0, 0, 0, 0, 0, 228, 219, 190, 230,
	167, 182, 239, 183, 184, 211, 154, 198, 101, 180,
	0, 170, 149, 177, 150, 168, 192, 82, 195, 166,
	221, 201, 285, 236, 92, 205, 0, 107, 98, 270,
	960, 194, 223, 196, 218, 189, 212, 160, 204, 231,
	181, 209, 0, 0, 0, 69, 0, 0, 0, 0,
	0, 0, 0, 0, 77, 207, 226, 179, 208, 210,
	148, 206, 0, 152, 155, 238, 224, 173, 174, 0,
	0, 0, 270, 270, 270, 270, 193, 197, 215, 187,
	0, 0, 0, 998, 0, 0, 270, 0, 171, 960,
	203, 0, 557, 0, 158, 153, 191, 0, 0, 0,
	284, 0, 172, 216, 0, 0, 0, 286, 188, 121,
	225, 186, 185, 229, 232, 103, 0, 222, 169, 178,
	78, 176, 106, 102, 116, 73, 114, 109, 96, 88,
	89, 72, 0, 105, 81, 86, 80, 100, 111, 112,
	79, 126, 76, 120, 75, 282, 119, 99, 281, 110,
	115, 97, 94, 74, 113, 95, 93, 90, 83, 0,
	151, 0, 108, 117, 127, 165, 287, 122, 123, 124,
	0, 0, 0, 0, 0, 0, 288, 163, 164, 161,
	162, 199, 200, 233, 234, 235, 217, 159, 0, 0,
	220, 202, 71, 0, 91, 125, 104, 85, 118, 0,
	0, 0, 0, 175, 237, 214, 213, 227, 0, 84,
	0, 0, 0, 0, 0, 276, 275, 283, 228, 219,
	190, 230, 167, 182, 239, 183, 184, 211, 154, 198,
	101, 180, 0, 170, 149, 177, 150, 168, 192, 82,
	195, 166, 221, 201, 137, 236, 92, 205, 0, 107,
	98, 0, 0, 194, 223, 196, 218, 189, 212, 160,
	204, 231, 181, 209, 0, 0, 0, 145, 0, 0,
	0, 0, 0, 0, 0, 0, 77, 207, 226, 179,
	208, 210, 148, 206, 0, 152, 155, 238, 224, 173,
	174, 0, 0, 0, 0, 0, 0, 0, 193, 197,
	215, 187, 0, 0, 0, 0, 0, 0, 0, 0,
	171, 0, 203, 0, 0, 0, 158, 153, 191, 0,
	0, 0, 139, 0, 172, 216, 0, 0, 0, 144,
	188, 121, 225, 186, 185, 229, 232, 103, 0, 222,
	169, 178, 78, 176, 106, 102, 116, 73, 114, 109,
	96, 88, 89, 72, 0, 105, 81, 86, 80, 100,
	111, 112, 79, 126, 76, 120, 75, 156, 119, 99,
	157, 110, 115, 97, 94, 74, 113, 95, 93, 90,
	83, 0, 151, 0, 108, 117, 127, 165, 136, 122,
	123, 124, 140, 141, 0, 142, 0, 143, 138, 163,
	164, 161, 162, 199, 200, 233, 234, 235, 217, 159,
	0, 0, 220, 202, 71, 0, 91, 125, 104, 85,
	118, 0, 0, 0, 0, 175, 237, 214, 213, 227,
	0, 84, 0, 0, 0, 0, 0, 87, 228, 219,
	190, 230, 167, 182, 239, 183, 184, 211, 154, 198,
	101, 180, 0, 170, 149, 177, 150, 168, 192, 82,
	195, 166, 221, 201, 285, 236, 92, 205, 0, 107,
	98, 0, 0, 194, 223, 196, 218, 189, 212, 160,
	204, 231, 181, 209, 0, 0, 0, 69, 0, 0,
	0, 0, 0, 0, 0, 0, 77, 207, 226, 179,
	208, 210, 148, 206, 0, 152, 155, 238, 224, 173,
	174, 0, 0, 0, 0, 0, 0, 0, 193, 197,
	215, 187, 0, 0, 0, 0, 0, 0, 0, 0,
	171, 0, 203, 0, 0, 0, 158, 153, 191, 0,
	0, 0, 284, 0, 172, 216, 0, 0, 0, 286,
	188, 121, 225, 186, 185, 229, 232, 103, 0, 222,
	169, 178, 78, 176, 106, 102, 116, 73, 114, 109,
	96, 88, 89, 72, 0, 105, 81, 86, 80, 100,
	111, 112, 79, 126, 76, 120, 75, 282, 119, 99,
	281, 110, 115, 97, 94, 74, 113, 95, 93, 90,
	83, 0, 151, 0, 108, 117, 127, 165, 287, 122,
	123, 124, 0, 0, 0, 0, 0, 0, 288, 163,
	164, 161, 162, 199, 200, 233, 234, 235, 217, 159,
	0, 0, 220, 202, 71, 0, 91, 125, 104, 85,
	118, 0, 0, 0, 0, 175, 237, 214, 213, 227,
	0, 84, 0, 0, 0, 0, 0, 87, 0, 283,
	228, 219, 190, 230, 167, 182, 239, 183, 184, 211,
	154, 198, 101, 180, 0, 170, 149, 177, 150, 168,
	192, 82, 195, 166, 221, 201, 285, 236, 92, 205,
	0, 107, 98, 0, 0, 194, 223, 196, 218, 189,
	212, 160, 204, 231, 181, 209, 0, 0, 0, 69,
	0, 0, 0, 0, 0, 0, 0, 0, 77, 207,
	226, 179, 208, 210, 148, 206, 0, 152, 155, 238,
	224, 173, 174, 0, 0, 0, 0, 0, 0, 0,
	193, 197, 215, 187, 0, 0, 0, 0, 0, 0,
	977, 0, 171, 0, 203, 0, 0, 0, 158, 153,
	191, 0, 0, 0, 284, 0, 172, 216, 0, 0,
	0, 286, 188, 121, 225, 186, 185, 229, 232, 103,
	0, 222, 169, 178, 78, 176, 106, 102, 116, 73,
	114, 109, 96, 88, 89, 72, 0, 105, 81, 86,
	80, 100, 111, 112, 79, 126, 76, 120, 75, 156,
	119, 99, 157, 110, 115, 97, 94, 74, 113, 95,
	93, 90, 83, 0, 151, 0, 108, 117, 127, 165,
	287, 122, 123, 124, 0, 0, 0, 0, 0, 0,
	288, 163, 164, 161, 162, 199, 200, 233, 234, 235,
	217, 159, 0, 0, 220, 202, 71, 0, 91, 125,
	104, 85, 118, 0, 0, 0, 0, 175, 237, 214,
	213, 227, 0, 84, 0, 0, 0, 0, 0, 87,
	228, 219, 190, 230, 167, 182, 239, 183, 184, 211,
	154, 198, 101, 180, 0, 170, 149, 177, 150, 168,
	192, 82, 195, 166, 221, 201, 285, 236, 92, 205,
	0, 107, 98, 0, 0, 194, 223, 196, 218, 189,
	212, 160, 204, 231, 181, 209, 49, 0, 0, 69,
	0, 0, 0, 0, 0, 0, 0, 0, 77, 207,
	226, 179, 208, 210, 148, 206, 0, 152, 155, 238,
	224, 173, 174, 0, 0, 0, 0, 0, 0, 0,
	193, 197, 215, 187, 0, 0, 0, 0, 0, 0,
	0, 0, 171, 0, 203, 0, 0, 0, 158, 153,
	191, 0, 0, 0, 284, 0, 172, 216, 0, 0,
	0, 286, 188, 121, 225, 186, 185, 229, 232, 103,
	0, 222, 169, 178, 78, 176, 106, 102, 116, 73,
	114, 109, 96, 88, 89, 72, 0, 105, 81, 86,
	80, 100, 111, 112, 79, 126, 76, 120, 75, 156,
	119, 99, 157, 110, 115, 97, 94, 74, 113, 95,
	93, 90, 83, 0, 151, 0, 108, 117, 127, 165,
	287, 122, 123, 124, 0, 0, 0, 0, 0, 0,
	288, 163, 164, 161, 162, 199, 200, 233, 234, 235,
	217, 159, 0, 0, 220, 202, 71, 0, 91, 125,
	104, 85, 118, 0, 0, 0, 0, 175, 237, 214,
	213, 227, 0, 84, 0, 0, 0, 0, 0, 87,
	228, 219, 190, 230, 167, 182, 239, 183, 184, 211,
	154, 198, 101, 180, 0, 170, 149, 177, 150, 168,
	192, 82, 195, 166, 221, 201, 285, 236, 92, 205,
	0, 107, 98, 0, 0, 194, 223, 196, 218, 189,
	212, 160, 204, 231, 181, 209, 0, 0, 0, 376,
	0, 0, 0, 0, 0, 0, 0, 0, 77, 207,
	226, 179, 208, 210, 148, 206, 0, 152, 155, 238,
	224, 173, 174, 0, 0, 0, 0, 0, 0, 0,
	193, 197, 215, 187, 0, 0, 0, 0, 0, 0,
	870, 0, 171, 0, 203, 0, 0, 0, 158, 153,
	191, 0, 0, 0, 284, 0, 172, 216, 0, 0,
	0, 286, 188, 121, 225, 186, 185, 229, 232, 103,
	0, 222, 169, 178, 78, 176, 106, 102, 116, 73,
	114, 109, 96, 88, 89, 72, 0, 105, 81, 86,
	80, 100, 111, 112, 79, 126, 76, 120, 75, 156,
	119, 99, 157, 110, 115, 97, 94, 74, 113, 95,
	93, 90, 83, 0, 151, 0, 108, 117, 127, 165,
	287, 122, 123, 124, 0, 0, 0, 0, 0, 0,
	288, 163, 164, 161, 162, 199, 200, 233, 234, 235,
	217, 159, 0, 0, 220, 202, 71, 0, 91, 125,
	104, 85, 118, 0, 0, 0, 0, 175, 237, 214,
	213, 227, 0, 84, 0, 0, 0, 0, 0, 87,
	228, 219, 190, 230, 167, 182, 239, 183, 184, 211,
	154, 198, 101, 180, 0, 170, 149, 177, 150, 168,
	192, 82, 195, 166, 221, 201, 285, 236, 92, 205,
	0, 107, 98, 0, 0, 194, 223, 196, 218, 189,
	212, 160, 204, 231, 181, 209, 0, 0, 0, 69,
	0, 0, 0, 0, 0, 0, 0, 0, 77, 207,
	226, 179, 208, 210, 148, 206, 0, 152, 155, 238,
	224, 173, 174, 0, 0, 0, 0, 0, 0, 0,
	193, 197, 215, 187, 0, 0, 0, 0, 0, 0,
	0, 0, 171, 0, 203, 0, 0, 0, 158, 153,
	191, 0, 0, 0, 284, 0, 172, 216, 0, 0,
	0, 286, 188, 121, 225, 186, 185, 229, 232, 103,
	0, 222, 169, 178, 78, 176, 106, 102, 116, 73,
	114, 109, 96, 88, 89, 72, 0, 105, 81, 86,
	80, 100, 111, 112, 79, 126, 76, 120, 75, 156,
	119, 99, 157, 110, 115, 97, 94, 74, 113, 95,
	93, 90, 83, 0, 151, 0, 108, 117, 127, 165,
	287, 122, 123, 124, 0, 0, 0, 0, 0, 0,
	288, 163, 164, 161, 162, 199, 200, 233, 234, 235,
	217, 159, 0, 0, 220, 202, 71, 0, 91, 125,
	104, 85, 118, 0, 0, 0, 0, 175, 237, 214,
	213, 227, 0, 84, 0, 0, 0, 0, 0, 87,
	228, 219, 190, 230, 167, 182, 239, 183, 184, 211,
	154, 198, 101, 180, 0, 170, 149, 177, 150, 168,
	192, 82, 195, 166, 221, 201, 285, 236, 92, 205,
	0, 107, 98, 0, 0, 194, 223, 196, 218, 189,
	212, 160, 204, 231, 181, 209, 0, 0, 0, 376,
	0, 0, 0, 0, 0, 0, 0, 0, 77, 207,
	226, 179, 208, 210, 148, 206, 0, 152, 155, 238,
	224, 173, 174, 0, 0, 0, 0, 0, 0, 0,
	193, 197, 215, 187, 0, 0, 0, 0, 0, 0,
	0, 0, 171, 0, 203, 0, 0, 0, 158, 153,
	191, 0, 0, 0, 284, 0, 172, 216, 0, 0,
	0, 286, 188, 121, 225, 186, 185, 229, 232, 103,
	0, 222, 169, 178, 78, 176, 106, 102, 116, 73,
	114, 109, 96, 88, 89, 72, 0, 105, 81, 86,
	80, 100, 111, 112, 79, 126, 76, 120, 75, 156,
	119, 99, 157, 110, 115, 97, 94, 74, 113, 95,
	93, 90, 83, 0, 151, 0, 108, 117, 127, 165,
	287, 122, 123, 124, 0, 0, 0, 0, 0, 0,
	288, 163, 164, 161, 162, 199, 200, 233, 234, 235,
	217, 159, 0, 0, 220, 202, 71, 0, 91, 125,
	104, 85, 118, 0, 0, 0, 0, 175, 237, 214,
	213, 227, 0, 84, 0, 0, 0, 0, 0, 87,
	228, 219, 190, 230, 167, 182, 239, 183, 184, 211,
	154, 198, 101, 180, 0, 170, 149, 177, 150, 168,
	192, 82, 195, 166, 221, 201, 285, 236, 92, 205,
	0, 107, 98, 0, 0, 194, 223, 196, 218, 189,
	212, 160, 204, 231, 181, 209, 0, 0, 0, 241,
	0, 0, 0, 0, 0, 0, 0, 0, 77, 207,
	226, 179, 208, 210, 148, 206, 0, 152, 155, 238,
	224, 173, 174, 0, 0, 0, 0, 0, 0, 0,
	193, 197, 215, 187, 0, 0, 0, 0, 0, 0,
	0, 0, 171, 0, 203, 0, 0, 0, 158, 153,
	191, 0, 0, 0, 284, 0, 172, 216, 0, 0,
	0, 286, 188, 121, 225, 186, 185, 229, 232, 103,
	0, 222, 169, 178, 78, 176, 106, 102, 116, 73,
	114, 109, 96, 88, 89, 72, 0, 105, 81, 86,
	80, 100, 111, 112, 79, 126, 76, 120, 75, 156,
	119, 99, 157, 110, 115, 97, 94, 74, 113, 95,
	93, 90, 83, 0, 151, 0, 108, 117, 127, 165,
	287, 122, 123, 124, 0, 0, 0, 0, 0, 0,
	288, 163, 164, 161, 162, 199, 200, 233, 234, 235,
	217, 159, 0, 0, 220, 202, 71, 0, 91, 125,
	104, 85, 118, 0, 0, 0, 0, 175, 237, 214,
	213, 227, 101, 84, 0, 675, 0, 327, 0, 87,
	0, 82, 0, 326, 0, 0, 0, 363, 92, 0,
	0, 107, 98, 0, 0, 0, 0, 356, 357, 0,
	0, 0, 0, 0, 0, 0, 49, 0, 0, 376,
	344, 343, 345, 346, 347, 348, 0, 0, 77, 349,
	350, 351, 0, 0, 0, 324, 337, 0, 362, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 864, 0, 0, 0, 0, 0, 0, 334, 335,
	678, 0, 0, 0, 374, 0, 336, 0, 0, 333,
	338, 475, 474, 484, 485, 477, 478, 479, 480, 481,
	482, 483, 476, 121, 0, 486, 372, 0, 0, 103,
	0, 0, 0, 0, 78, 0, 106, 102, 116, 73,
	114, 109, 96, 88, 89, 72, 0, 105, 81, 86,
	80, 100, 111, 112, 79, 126, 76, 120, 75, 0,
	119, 99, 0, 110, 115, 97, 94, 74, 113, 95,
	93, 90, 83, 0, 0, 0, 108, 117, 127, 0,
	0, 122, 123, 124, 0, 0, 0, 0, 0, 0,
	0, 364, 373, 370, 371, 368, 369, 367, 366, 365,
	375, 358, 359, 361, 0, 360, 71, 0, 91, 125,
	104, 85, 118, 0, 0, 101, 0, 0, 0, 0,
	327, 0, 0, 84, 82, 0, 326, 0, 0, 87,
	363, 92, 0, 0, 107, 98, 0, 0, 0, 0,
	356, 357, 0, 0, 0, 0, 0, 0, 0, 49,
	0, 0, 376, 344, 343, 345, 346, 347, 348, 0,
	0, 77, 349, 350, 351, 0, 0, 0, 324, 337,
	0, 362, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 780, 0, 0, 0, 0, 0,
	0, 334, 335, 678, 0, 0, 0, 374, 0, 336,
	0, 0, 333, 338, 475, 474, 484, 485, 477, 478,
	479, 480, 481, 482, 483, 476, 121, 0, 486, 372,
	0, 0, 103, 0, 0, 0, 0, 78, 0, 106,
	102, 116, 73, 114, 109, 96, 88, 89, 72, 0,
	105, 81, 86, 80, 100, 111, 112, 79, 126, 76,
	120, 75, 0, 119, 99, 0, 110, 115, 97, 94,
	74, 113, 95, 93, 90, 83, 0, 0, 0, 108,
	117, 127, 0, 0, 122, 123, 124, 0, 0, 0,
	0, 0, 0, 0, 364, 373, 370, 371, 368, 369,
	367, 366, 365, 375, 358, 359, 361, 0, 360, 71,
	0, 91, 125, 104, 85, 118, 0, 0, 101, 0,
	0, 0, 0, 327, 0, 0, 84, 82, 0, 326,
	0, 0, 87, 363, 92, 0, 0, 107, 98, 0,
	0, 0, 0, 356, 357, 0, 0, 0, 0, 0,
	0, 0, 49, 0, 318, 376, 344, 343, 345, 346,
	347, 348, 0, 0, 77, 349, 350, 351, 0, 0,
	0, 324, 337, 0, 362, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 334, 335, 0, 0, 0, 0,
	374, 0, 336, 0, 0, 333, 338, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 121,
	0, 0, 372, 0, 0, 103, 0, 0, 0, 0,
	78, 0, 106, 102, 116, 73, 114, 109, 96, 88,
	89, 72, 0, 105, 81, 86, 80, 100, 111, 112,
	79, 126, 76, 120, 75, 0, 119, 99, 0, 110,
	115, 97, 94, 74, 113, 95, 93, 90, 83, 0,
	0, 0, 108, 117, 127, 0, 0, 122, 123, 124,
	0, 0, 0, 0, 0, 0, 0, 364, 373, 370,
	371, 368, 369, 367, 366, 365, 375, 358, 359, 361,
	22, 360, 71, 0, 91, 125, 104, 85, 118, 0,
	0, 101, 0, 0, 0, 0, 327, 0, 0, 84,
	82, 0, 326, 0, 0, 87, 363, 92, 0, 0,
	107, 98, 0, 0, 0, 0, 356, 357, 0, 0,
	0, 0, 0, 0, 0, 49, 0, 0, 376, 344,
	343, 345, 346, 347, 348, 0, 0, 77, 349, 350,
	351, 0, 0, 0, 324, 337, 0, 362, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 334, 335, 0,
	0, 0, 0, 374, 0, 336, 0, 0, 333, 338,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 121, 0, 0, 372, 0, 0, 103, 0,
	0, 0, 0, 78, 0, 106, 102, 116, 73, 114,
	109, 96, 88, 89, 72, 0, 105, 81, 86, 80,
	100, 111, 112, 79, 126, 76, 120, 75, 0, 119,
	99, 0, 110, 115, 97, 94, 74, 113, 95, 93,
	90, 83, 0, 0, 0, 108, 117, 127, 0, 0,
	122, 123, 124, 0, 0, 0, 0, 0, 0, 0,
	364, 373, 370, 371, 368, 369, 367, 366, 365, 375,
	358, 359, 361, 0, 360, 71, 0, 91, 125, 104,
	85, 118, 0, 0, 101, 0, 0, 0, 0, 327,
	0, 0, 84, 82, 0, 326, 0, 0, 87, 363,
	92, 0, 0, 107, 98, 0, 0, 0, 0, 356,
	357, 0, 0, 0, 0, 0, 0, 0, 49, 0,
	0, 376, 344, 343, 345, 346, 347, 348, 0, 0,
	77, 349, 350, 351, 0, 0, 0, 324, 337, 0,
	362, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	334, 335, 0, 0, 0, 0, 374, 0, 336, 0,
	0, 333, 338, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 121, 0, 0, 372, 0,
	0, 103, 0, 0, 0, 0, 78, 0, 106, 102,
	116, 73, 114, 109, 96, 88, 89, 72, 0, 105,
	81, 86, 80, 100, 111, 112, 79, 126, 76, 120,
	75, 0, 119, 99, 0, 110, 115, 97, 94, 74,
	113, 95, 93, 90, 83, 0, 0, 0, 108, 117,
	127, 0, 0, 122, 123, 124, 0, 0, 0, 0,
	0, 0, 0, 364, 373, 370, 371, 368, 369, 367,
	366, 365, 375, 358, 359, 361, 0, 360, 71, 0,
	91, 125, 104, 85, 118, 0, 0, 101, 0, 0,
	0, 0, 0, 0, 0, 84, 82, 0, 0, 0,
	0, 87, 363, 92, 0, 0, 107, 98, 0, 0,
	0, 0, 356, 357, 0, 0, 0, 0, 0, 0,
	0, 49, 0, 0, 376, 344, 343, 345, 346, 347,
	348, 0, 0, 77, 349, 350, 351, 0, 0, 0,
	0, 337, 0, 362, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 334, 335, 0, 0, 0, 0, 374,
	0, 336, 0, 0, 333, 338, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 121, 0,
	0, 372, 0, 0, 103, 0, 0, 0, 0, 78,
	0, 106, 102, 116, 73, 114, 109, 96, 88, 89,
	72, 0, 105, 81, 86, 80, 100, 111, 112, 79,
	126, 76, 120, 75, 0, 119, 99, 0, 110, 115,
	97, 94, 74, 113, 95, 93, 90, 83, 0, 0,
	0, 108, 117, 127, 0, 0, 122, 123, 124, 0,
	0, 0, 0, 0, 0, 0, 364, 373, 370, 371,
	368, 369, 367, 366, 365, 375, 358, 359, 361, 0,
	360, 71, 0, 91, 125, 104, 85, 118, 0, 0,
	101, 0, 0, 0, 0, 0, 0, 0, 84, 82,
	0, 0, 0, 0, 87, 0, 92, 0, 0, 107,
	98, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 69, 0, 0,
	0, 0, 0, 0, 0, 0, 77, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 475, 474, 484, 485, 477, 478, 479, 480,
	481, 482, 483, 476, 0, 0, 486, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 121, 0, 0, 0, 0, 0, 103, 0, 0,
	0, 0, 78, 0, 106, 102, 116, 73, 114, 109,
	96, 88, 89, 72, 0, 105, 81, 86, 80, 100,
	111, 112, 79, 126, 76, 120, 75, 0, 119, 99,
	0, 110, 115, 97, 94, 74, 113, 95, 93, 90,
	83, 0, 0, 0, 108, 117, 127, 101, 0, 122,
	123, 124, 0, 0, 0, 0, 82, 0, 0, 0,
	0, 0, 0, 92, 0, 0, 107, 98, 0, 0,
	0, 0, 0, 0, 71, 0, 91, 125, 104, 85,
	118, 0, 0, 0, 69, 0, 0, 0, 0, 0,
	0, 84, 0, 77, 0, 0, 0, 87, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 66, 0, 121, 0,
	0, 0, 67, 0, 103, 0, 0, 0, 0, 78,
	0, 106, 102, 116, 73, 114, 109, 96, 88, 89,
	72, 0, 105, 81, 86, 80, 100, 111, 112, 79,
	126, 76, 120, 75, 0, 119, 99, 0, 110, 115,
	97, 94, 74, 113, 95, 93, 90, 83, 22, 0,
	0, 108, 117, 127, 0, 0, 122, 123, 124, 101,
	0, 0, 0, 0, 0, 0, 0, 64, 82, 0,
	0, 0, 0, 0, 0, 92, 0, 0, 107, 98,
	0, 71, 0, 91, 125, 104, 85, 118, 0, 0,
	0, 0, 0, 49, 0, 0, 241, 0, 84, 0,
	0, 0, 0, 0, 87, 77, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	121, 0, 0, 0, 0, 0, 103, 0, 0, 0,
	0, 78, 0, 106, 102, 116, 73, 114, 109, 96,
	88, 89, 72, 0, 105, 81, 86, 80, 100, 111,
	112, 79, 126, 76, 120, 75, 0, 119, 99, 0,
	110, 115, 97, 94, 74, 113, 95, 93, 90, 83,
	0, 0, 0, 108, 117, 127, 0, 101, 122, 123,
	124, 959, 0, 0, 0, 0, 82, 0, 0, 0,
	0, 0, 0, 92, 0, 0, 107, 98, 0, 0,
	0, 0, 0, 71, 0, 91, 125, 104, 85, 118,
	0, 0, 0, 0, 241, 0, 961, 0, 0, 0,
	84, 0, 0, 77, 0, 0, 87, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 121, 0,
	0, 0, 0, 0, 103, 0, 0, 0, 0, 78,
	0, 106, 102, 116, 73, 114, 109, 96, 88, 89,
	72, 0, 105, 81, 86, 80, 100, 111, 112, 79,
	126, 76, 120, 75, 0, 119, 99, 0, 110, 115,
	97, 94, 74, 113, 95, 93, 90, 83, 22, 0,
	0, 108, 117, 127, 0, 0, 122, 123, 124, 101,
	0, 0, 0, 0, 0, 0, 0, 0, 82, 0,
	0, 0, 0, 0, 0, 92, 0, 0, 107, 98,
	0, 71, 0, 91, 125, 104, 85, 118, 0, 0,
	0, 0, 0, 49, 0, 0, 69, 0, 84, 0,
	0, 0, 0, 0, 87, 77, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	121, 0, 0, 0, 0, 0, 103, 0, 0, 0,
	0, 78, 0, 106, 102, 116, 73, 114, 109, 96,
	88, 89, 72, 0, 105, 81, 86, 80, 100, 111,
	112, 79, 126, 76, 120, 75, 0, 119, 99, 0,
	110, 115, 97, 94, 74, 113, 95, 93, 90, 83,
	0, 0, 0, 108, 117, 127, 101, 0, 122, 123,
	124, 0, 0, 0, 0, 82, 0, 0, 0, 0,
	0, 0, 92, 0, 0, 107, 98, 0, 0, 0,
	0, 0, 0, 71, 0, 91, 125, 104, 85, 118,
	0, 0, 0, 69, 0, 0, 543, 0, 0, 544,
	84, 0, 77, 0, 0, 0, 87, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 121, 0, 0,
	0, 0, 0, 103, 0, 0, 0, 0, 78, 0,
	106, 102, 116, 73, 114, 109, 96, 88, 89, 72,
	0, 105, 81, 86, 80, 100, 111, 112, 79, 126,
	76, 120, 75, 0, 119, 99, 0, 110, 115, 97,
	94, 74, 113, 95, 93, 90, 83, 0, 0, 0,
	108, 117, 127, 101, 0, 122, 123, 124, 0, 0,
	0, 0, 82, 0, 400, 0, 0, 0, 0, 92,
	0, 0, 107, 98, 0, 0, 0, 0, 0, 0,
	71, 0, 91, 125, 104, 85, 118, 0, 0, 0,
	69, 0, 399, 0, 0, 0, 0, 84, 0, 77,
	0, 0, 0, 87, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 121, 0, 0, 0, 0, 0,
	103, 0, 0, 0, 0, 78, 0, 106, 102, 116,
	73, 114, 109, 96, 88, 89, 72, 0, 105, 81,
	86, 80, 100, 111, 112, 79, 126, 76, 120, 75,
	0, 119, 99, 0, 110, 115, 97, 94, 74, 113,
	95, 93, 90, 83, 0, 0, 0, 108, 117, 127,
	101, 0, 122, 123, 124, 0, 0, 0, 0, 82,
	0, 0, 0, 0, 0, 0, 92, 0, 0, 107,
	98, 0, 0, 0, 0, 0, 0, 71, 0, 91,
	125, 104, 85, 118, 0, 0, 0, 241, 0, 961,
	0, 0, 0, 0, 84, 0, 77, 0, 0, 0,
	87, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 121, 0, 0, 0, 0, 0, 103, 0, 0,
	0, 0, 78, 0, 106, 102, 116, 73, 114, 109,
	96, 88, 89, 72, 0, 105, 81, 86, 80, 100,
	111, 112, 79, 126, 76, 120, 75, 0, 119, 99,
	0, 110, 115, 97, 94, 74, 113, 95, 93, 90,
	83, 0, 0, 0, 108, 117, 127, 101, 0, 122,
	123, 124, 0, 0, 0, 0, 82, 0, 0, 0,
	0, 0, 0, 92, 0, 0, 107, 98, 0, 0,
	0, 0, 0, 0, 71, 0, 91, 125, 104, 85,
	118, 49, 0, 0, 241, 0, 0, 0, 0, 0,
	0, 84, 0, 77, 0, 0, 0, 87, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 121, 0,
	0, 0, 0, 0, 103, 0, 0, 0, 0, 78,
	0, 106, 102, 116, 73, 114, 109, 96, 88, 89,
	72, 0, 105, 81, 86, 80, 100, 111, 112, 79,
	126, 76, 120, 75, 0, 119, 99, 0, 110, 115,
	97, 94, 74, 113, 95, 93, 90, 83, 0, 0,
	0, 108, 117, 127, 101, 0, 122, 123, 124, 0,
	0, 0, 0, 82, 0, 0, 0, 0, 0, 0,
	92, 0, 0, 107, 98, 0, 0, 0, 0, 0,
	0, 71, 0, 91, 125, 104, 85, 118, 0, 0,
	0, 69, 0, 789, 0, 0, 0, 0, 84, 0,
	77, 0, 0, 0, 87, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 121, 0, 0, 0, 0,
	0, 103, 0, 0, 0, 0, 78, 0, 106, 102,
	116, 73, 114, 109, 96, 88, 89, 72, 0, 105,
	81, 86, 80, 100, 111, 112, 79, 126, 76, 120,
	75, 0, 119, 99, 0, 110, 115, 97, 94, 74,
	113, 95, 93, 90, 83, 0, 0, 0, 108, 117,
	127, 101, 0, 122, 123, 124, 0, 0, 0, 389,
	82, 0, 0, 0, 0, 0, 0, 92, 0, 0,
	107, 98, 0, 0, 0, 0, 0, 0, 71, 0,
	91, 125, 104, 85, 118, 0, 0, 0, 241, 0,
	0, 0, 0, 0, 0, 84, 0, 77, 0, 0,
	0, 87, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 121, 0, 0, 0, 0, 0, 103, 0,
	0, 0, 0, 78, 0, 106, 102, 116, 73, 114,
	109, 96, 88, 89, 72, 0, 105, 81, 86, 80,
	100, 111, 112, 79, 126, 76, 120, 75, 0, 119,
	99, 0, 110, 115, 97, 94, 74, 113, 95, 93,
	90, 83, 0, 0, 0, 108, 117, 127, 101, 0,
	122, 123, 124, 0, 0, 0, 0, 82, 0, 0,
	0, 0, 0, 0, 92, 0, 0, 107, 98, 0,
	0, 0, 0, 0, 0, 71, 0, 91, 125, 104,
	85, 118, 0, 0, 0, 69, 0, 0, 0, 0,
	0, 0, 84, 0, 77, 0, 0, 0, 87, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 121,
	0, 0, 0, 0, 0, 103, 0, 0, 0, 0,
	78, 0, 106, 102, 116, 73, 114, 109, 96, 88,
	89, 72, 0, 105, 81, 86, 80, 100, 111, 112,
	79, 126, 76, 120, 75, 0, 119, 99, 0, 110,
	115, 97, 94, 74, 113, 95, 93, 90, 83, 0,
	0, 0, 108, 117, 127, 101, 0, 122, 123, 124,
	0, 0, 0, 0, 82, 0, 0, 0, 0, 0,
	0, 92, 0, 0, 107, 98, 0, 0, 0, 0,
	0, 0, 71, 0, 91, 125, 104, 85, 118, 0,
	0, 0, 376, 0, 0, 0, 0, 0, 0, 84,
	0, 77, 0, 0, 0, 87, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 121, 0, 0, 0,
	0, 0, 103, 0, 0, 0, 0, 78, 0, 106,
	102, 116, 73, 114, 109, 96, 88, 89, 72, 0,
	105, 81, 86, 80, 100, 111, 112, 79, 126, 76,
	120, 75, 0, 119, 99, 0, 110, 115, 97, 94,
	74, 113, 95, 93, 90, 83, 0, 0, 0, 108,
	117, 127, 101, 0, 122, 123, 124, 0, 0, 0,
	0, 82, 0, 0, 0, 0, 0, 0, 92, 0,
	0, 107, 98, 0, 0, 0, 0, 0, 0, 71,
	0, 91, 125, 104, 85, 118, 0, 0, 0, 241,
	0, 0, 0, 0, 0, 0, 84, 0, 77, 0,
	0, 0, 87, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 121, 0, 0, 0, 0, 0, 103,
	0, 0, 0, 0, 78, 0, 106, 102, 116, 73,
	114, 109, 96, 88, 89, 72, 0, 105, 81, 86,
	80, 100, 111, 112, 79, 126, 76, 120, 75, 0,
	119, 99, 0, 110, 115, 97, 94, 74, 113, 95,
	93, 90, 83, 0, 0, 0, 108, 117, 127, 0,
	0, 122, 123, 124, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 71, 0, 91, 125,
	104, 85, 118, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 84, 0, 0, 0, 0, 0, 87,
}
var yyPact = [...]int{

	1081, -1000, -166, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	668, 712, -1000, -1000, -1000, -1000, -1000, 471, 4730, 29,
	-19, 56, 55, 1673, 6625, -1000, -1000, 258, -1000, -158,
	-1000, -1000, -1000, -1000, -1000, -1000, 460, -1000, -1000, -1000,
	-1000, -1000, 659, 666, 511, 653, 537, -1000, 29, 6625,
	695, 1451, -137, 308, 30, 52, 30, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 54, -1000,
	25, 382, 25, 6625, 6625, -1000, 694, -65, 692, -14,
	-1000, -1000, -72, -1000, -78, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 387, 640, 4187, 4187, 668, -1000,
	460, -1000, -1000, -1000, 628, -1000, -1000, 215, 6154, 574,
	92, 6625, 449, 1893, -1000, -1000, -1000, 153, 5526, -1000,
	-1000, -1000, 568, -1000, -1000, -1000, -1000, -1000, -1000, 664,
	395, -1000, 1280, 6625, 152, 380, 6625, 6625, 6625, 642,
	498, 6625, -1000, -1000, -1000, 6625, 676, 6625, 6625, 6625,
	-1000, -1000, 679, -1000, 676, -1000, -1000, -1000, -1000, -1000,
	708, 127, 248, -1000, 4187, 1073, 461, 461, -1000, -1000,
	73, -1000, -1000, 4380, 4380, 4380, 4380, 4380, 4380, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 461, 88, -1000, 3994, 461, 461, 461, 461,
	461, 461, 4187, 461, 461, 461, 461, 461, 461, 461,
	461, 461, 461, 461, 461, 461, -1000, -1000, 458, -1000,
	235, 659, 387, 537, 5369, 500, -1000, -1000, 443, 6625,
	-1000, 6468, 3215, 674, 1893, 449, 4187, 79, -1000, -1000,
	-1000, -1000, -143, -154, 112, 214, -60, -1000, -1000, 463,
	-1000, 463, 463, 463, 463, -21, -21, -21, -21, -1000,
	-1000, -1000, -1000, -1000, 475, -1000, 463, 463, 463, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 474, 474, 474,
	467, 467, -1000, 639, 497, -1000, 42, -1000, -1000, 6625,
	-1000, -1000, 674, 6625, -1000, -1000, -1000, 659, -75, -1000,
	-1000, 550, 4187, 4187, 285, 4187, 4187, 116, 4380, 244,
	180, 4380, 4380, 4380, 4380, 4380, 4380, 4380, 4380, 4380,
	4380, 4380, 4380, 4380, 4380, 4380, 280, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 375, -1000, 460, 654, 654,
	96, 96, 96, 96, 96, 4573, 3415, 2995, 387, 391,
	188, 3994, 3608, 3608, 4187, 4187, 3608, 646, 159, 188,
	6311, -1000, 387, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	3608, 3608, 3608, 3608, 4187, -1000, -1000, -1000, 640, -1000,
	646, 658, -1000, 555, 552, 3608, -1000, 494, 6468, 461,
	-1000, 5212, -1000, 452, -1000, 150, -1000, 82, -1000, -1000,
	-1000, 668, 4187, -1000, 188, -1000, 361, 461, -1000, -55,
	149, -1000, -1000, 473, 632, 138, 350, -1000, -1000, 584,
	-1000, 182, -62, -1000, -1000, 254, -21, -21, -1000, -1000,
	79, 566, 79, 79, 79, 279, -1000, -1000, -1000, -1000,
	250, -1000, -1000, -1000, 239, -1000, -1000, 6625, -1000, 134,
	148, 39, 20, 17, 16, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 276, -1000, 548, 116, 179, -1000, -1000, 257, -1000,
	-1000, 188, 188, 675, -1000, -1000, -1000, -1000, 244, 4380,
	4380, 4380, 547, 675, 3625, 600, 278, 96, 144, 144,
	121, 121, 121, 121, 121, 110, 110, -1000, -1000, -1000,
	387, -1000, -1000, -1000, 387, 3608, 421, -1000, -1000, 1189,
	80, 461, 77, -1000, -1000, 4187, -1000, 387, 330, 330,
	91, 262, 330, 3608, 211, -1000, 4187, 387, -1000, 330,
	387, 330, 330, -1000, -1000, 6625, -1000, -1000, -1000, -1000,
	450, -1000, 634, 405, 410, -1000, -1000, 3801, 387, 386,
	71, 668, 6468, 4187, 2995, 659, 188, -1000, 340, 582,
	147, 337, 6311, -1000, 335, -1000, -1000, 493, 37, -1000,
	-1000, -1000, 400, 79, 79, -1000, 146, -1000, -1000, -1000,
	354, -1000, 417, 344, 2335, -1000, 6625, -1000, -1000, -1000,
	-1000, -1000, 334, -22, 471, 332, 308, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 547, 675, 3432, -1000, 4380,
	4380, -1000, -1000, 330, 3608, -1000, -1000, 5997, -1000, -1000,
	2555, 3608, 2775, 188, -1000, -1000, -1000, 46, 280, 46,
	-110, 444, 139, -1000, 4187, 207, -1000, -1000, -1000, -1000,
	-1000, -1000, 674, 5840, 624, -1000, 461, -1000, -1000, 491,
	6311, 6311, 659, -1000, 188, -1000, -1000, 387, -1000, -28,
	236, -1000, 306, -1000, 463, -1000, -56, 707, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 270,
	233, -1000, 231, -1000, -1000, -1000, -1000, -1000, -1000, 559,
	-1000, -1000, -1000, -1000, 4380, 675, 675, -1000, -1000, -1000,
	-1000, 68, 387, -1000, 387, 463, 463, -1000, 463, 467,
	-1000, 463, -2, 463, -3, 387, 387, 461, -107, -1000,
	188, 4187, 672, 412, 575, -1000, -1000, -1000, 644, 4892,
	5050, 699, -1000, 461, -1000, 460, 57, -1000, -1000, 2335,
	142, -1000, -1000, 6311, -1000, 113, -1000, -83, -1000, 399,
	398, 284, 675, 2115, -1000, -1000, -1000, 76, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 4380, 387, 263, 188,
	670, 663, 5840, 5840, 5840, 5840, -1000, 533, 523, -1000,
	513, 509, 528, 6625, -1000, 304, 4892, 99, -1000, 5683,
	-1000, -1000, 6468, 410, 387, 6311, -1000, 260, -1000, 191,
	601, -1000, 586, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	28, -1000, -1000, -1000, 4187, 4187, 575, 488, 490, -1000,
	-1000, -1000, -1000, 521, -1000, 520, -1000, -1000, -1000, -1000,
	-1000, 50, 47, 45, -1000, 409, -1000, -1000, -1000, -1000,
	245, -1000, -1000, 387, 43, -126, 188, 404, 4187, 4187,
	-1000, -1000, 461, 461, 461, -1000, -1000, 540, -120, -133,
	188, 188, 6311, 6311, 6311, -1000, 514, -1000, 293, -1000,
	293, 293, -123, -1000, 6311, -1000, -1000, -127, -1000, -134,
	-1000,
}
var yyPgo = [...]int{

	0, 927, 925, 920, 918, 916, 915, 57, 348, 913,
	912, 911, 909, 908, 907, 906, 905, 904, 902, 894,
	893, 892, 890, 50, 889, 885, 884, 48, 882, 49,
	881, 880, 879, 28, 65, 33, 26, 4, 878, 16,
	10, 3, 876, 875, 11, 874, 55, 871, 51, 868,
	867, 2, 40, 865, 860, 859, 856, 46, 5, 855,
	854, 852, 851, 850, 849, 39, 1, 15, 22, 19,
	848, 59, 6, 843, 41, 840, 838, 831, 827, 21,
	826, 45, 816, 18, 42, 813, 37, 8, 31, 54,
	47, 810, 806, 805, 325, 803, 138, 270, 802, 799,
	796, 794, 66, 0, 7, 27, 20, 792, 589, 44,
	14, 790, 787, 43, 12, 25, 784, 17, 783, 781,
	780, 779, 763, 760, 758, 178, 756, 753, 750, 13,
	32, 749, 748, 747, 746, 745, 68, 23, 742, 739,
	738, 737, 30, 735, 38, 24, 731, 727, 726, 9,
	725, 721, 720, 52, 144, 719, 263,
}
var yyR1 = [...]int{

	0, 151, 152, 152, 6, 6, 6, 6, 6, 6,
	6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
	6, 7, 7, 7, 8, 9, 9, 10, 10, 11,
	11, 26, 26, 12, 13, 14, 14, 116, 116, 15,
	15, 15, 15, 18, 145, 147, 132, 132, 131, 131,
	133, 133, 146, 146, 146, 142, 119, 119, 119, 122,
	122, 120, 120, 120, 120, 120, 120, 120, 121, 121,
	121, 121, 121, 123, 123, 123, 123, 123, 124, 124,
	124, 124, 124, 124, 124, 124, 124, 124, 124, 124,
	124, 124, 141, 141, 125, 125, 136, 136, 137, 137,
	137, 134, 134, 135, 135, 138, 138, 138, 126, 126,
	126, 126, 126, 126, 127, 127, 139, 139, 129, 129,
	129, 130, 130, 140, 140, 140, 140, 140, 128, 128,
	143, 148, 148, 148, 148, 144, 144, 150, 150, 149,
	16, 16, 16, 16, 16, 16, 16, 16, 17, 17,
	17, 1, 19, 2, 3, 4, 5, 5, 5, 5,
	118, 118, 118, 20, 20, 20, 20, 20, 20, 20,
	20, 20, 20, 20, 32, 32, 48, 48, 21, 22,
	22, 22, 22, 155, 23, 24, 24, 25, 25, 25,
	29, 29, 29, 27, 27, 28, 28, 35, 35, 34,
	34, 36, 36, 36, 36, 107, 107, 107, 106, 106,
	38, 38, 39, 39, 40, 40, 41, 41, 41, 49,
	42, 42, 42, 42, 112, 112, 111, 111, 111, 110,
	110, 43, 43, 43, 43, 44, 44, 44, 44, 45,
	45, 47, 47, 46, 46, 50, 50, 50, 50, 51,
	51, 52, 52, 37, 37, 37, 37, 37, 37, 37,
	95, 95, 54, 54, 53, 53, 53, 53, 53, 53,
	53, 53, 53, 53, 64, 64, 64, 64, 64, 64,
	55, 55, 55, 55, 55, 55, 55, 33, 33, 65,
	65, 65, 71, 66, 66, 58, 58, 58, 58, 58,
	58, 58, 58, 58, 58, 58, 58, 58, 58, 58,
	58, 58, 58, 58, 58, 58, 58, 58, 58, 58,
	58, 58, 58, 58, 58, 62, 62, 62, 60, 60,
	60, 60, 60, 60, 60, 60, 60, 61, 61, 61,
	61, 61, 61, 61, 61, 156, 156, 63, 63, 63,
	63, 30, 30, 30, 30, 30, 115, 115, 117, 117,
	117, 117, 117, 117, 117, 117, 117, 117, 117, 117,
	117, 75, 75, 31, 31, 73, 73, 74, 76, 76,
	72, 72, 72, 57, 57, 57, 57, 57, 57, 57,
	59, 59, 59, 77, 77, 78, 78, 79, 79, 80,
	80, 81, 82, 82, 82, 83, 83, 83, 83, 84,
	84, 84, 56, 56, 56, 56, 56, 56, 85, 85,
	85, 85, 86, 86, 67, 67, 69, 69, 68, 70,
	87, 87, 88, 89, 89, 90, 90, 92, 92, 92,
	91, 91, 91, 93, 93, 96, 96, 97, 97, 94,
	94, 98, 98, 98, 98, 98, 98, 98, 98, 98,
	98, 99, 99, 99, 100, 100, 101, 101, 101, 104,
	104, 105, 105, 108, 108, 109, 109, 102, 102, 102,
	102, 102, 102, 102, 102, 102, 102, 102, 102, 102,
	102, 102, 102, 102, 102, 102, 102, 102, 102, 102,
	102, 102, 102, 102, 102, 102, 102, 102, 102, 102,
	102, 102, 102, 102, 102, 102, 102, 102, 102, 102,
	102, 102, 102, 102, 102, 102, 102, 102, 102, 102,
	102, 102, 102, 102, 102, 102, 102, 102, 102, 102,
	102, 102, 102, 102, 102, 102, 102, 102, 102, 102,
	102, 102, 102, 102, 102, 102, 102, 102, 102, 102,
	102, 102, 102, 102, 102, 102, 102, 102, 102, 102,
	102, 102, 102, 102, 103, 103, 103, 103, 103, 103,
	103, 103, 103, 103, 103, 103, 103, 103, 103, 103,
	103, 103, 103, 103, 103, 103, 103, 103, 103, 103,
	103, 103, 103, 103, 103, 103, 103, 103, 103, 103,
	103, 103, 103, 103, 103, 103, 103, 103, 103, 103,
	103, 103, 103, 103, 103, 103, 103, 103, 103, 103,
	103, 153, 154, 113, 114, 114, 114,
}
var yyR2 = [...]int{

	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 4, 6, 7, 10, 1, 3, 1, 3, 6,
	7, 1, 1, 8, 7, 3, 4, 1, 1, 2,
	9, 4, 7, 4, 4, 3, 0, 3, 0, 4,
	0, 3, 1, 3, 3, 8, 3, 1, 1, 2,
	1, 1, 1, 1, 1, 1, 1, 1, 2, 2,
	2, 2, 2, 1, 2, 2, 2, 1, 4, 4,
	2, 2, 3, 3, 3, 3, 1, 1, 1, 1,
	1, 4, 1, 3, 0, 3, 0, 5, 0, 3,
	5, 0, 1, 0, 1, 0, 1, 2, 0, 2,
	2, 2, 2, 2, 0, 3, 0, 1, 0, 3,
	3, 0, 2, 0, 2, 1, 2, 1, 0, 2,
	4, 2, 3, 2, 2, 1, 1, 1, 3, 2,
	6, 7, 7, 7, 9, 7, 7, 7, 4, 5,
	4, 3, 3, 2, 2, 3, 2, 3, 2, 2,
	1, 1, 1, 3, 5, 6, 5, 5, 5, 3,
	3, 6, 3, 5, 0, 3, 0, 2, 2, 2,
	2, 2, 2, 0, 2, 0, 2, 1, 2, 2,
	0, 1, 1, 0, 1, 0, 1, 0, 1, 1,
	3, 1, 2, 3, 5, 0, 1, 2, 1, 1,
	0, 2, 1, 3, 1, 1, 1, 3, 3, 3,
	3, 5, 5, 3, 0, 1, 0, 1, 2, 1,
	1, 1, 2, 2, 1, 2, 3, 2, 3, 2,
	2, 2, 1, 1, 3, 0, 5, 5, 5, 1,
	3, 0, 2, 1, 3, 3, 2, 3, 1, 2,
	0, 3, 1, 1, 3, 3, 4, 4, 5, 3,
	4, 5, 6, 2, 1, 2, 1, 2, 1, 2,
	1, 1, 1, 1, 1, 1, 1, 0, 2, 1,
	1, 1, 3, 1, 3, 1, 1, 1, 1, 1,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 2, 2, 2, 2, 2,
	3, 1, 1, 1, 1, 4, 5, 6, 4, 4,
	6, 6, 6, 9, 7, 5, 4, 2, 2, 2,
	2, 2, 2, 2, 2, 0, 2, 4, 4, 4,
	4, 0, 3, 4, 7, 3, 1, 1, 2, 3,
	3, 1, 2, 2, 1, 2, 1, 2, 2, 1,
	2, 0, 1, 0, 2, 1, 2, 4, 0, 2,
	1, 3, 5, 1, 1, 1, 1, 1, 1, 1,
	1, 2, 2, 0, 3, 0, 2, 0, 3, 1,
	3, 2, 0, 1, 1, 0, 2, 4, 4, 0,
	2, 4, 2, 1, 3, 5, 4, 6, 1, 3,
	3, 5, 0, 5, 1, 3, 1, 2, 3, 1,
	1, 3, 3, 1, 3, 3, 3, 1, 2, 1,
	1, 1, 1, 1, 1, 0, 2, 0, 3, 0,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 0, 1, 1, 1, 1, 0, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 0, 0, 1, 1,
}
var yyChk = [...]int{

	-1000, -151, -6, -7, -11, -12, -13, -14, -15, -16,
	-17, -1, -19, -20, -21, -2, -3, -4, -5, -22,
	-8, -9, 6, -26, 8, 9, 29, -18, 109, 110,
	111, 133, 113, 126, 48, 211, 128, 217, 219, 220,
	223, 222, 24, 127, 131, 132, -153, 7, 195, 51,
	-152, 227, -79, 14, -25, 5, -23, -155, -23, -23,
	-23, -23, -145, 51, 187, -101, 116, 122, -104, 54,
	-103, 201, 140, 134, 162, 153, 151, 63, 129, 149,
	145, 143, 26, 167, 218, 206, 144, 224, 138, 139,
	166, 203, 33, 165, 161, 164, 137, 160, 37, 156,
	146, 17, 132, 124, 205, 142, 131, 36, 171, 136,
	158, 147, 148, 163, 135, 159, 133, 172, 207, 155,
	152, 118, 176, 177, 178, 204, 150, 173, -94, 120,
	116, 117, 187, 116, 116, -118, 175, 31, 185, 109,
	179, 180, 182, 184, 116, 54, -102, -103, 69, 21,
	23, 169, 72, 104, 15, 73, 154, 157, 103, 196,
	46, 188, 189, 186, 187, 174, 28, 9, 24, 127,
	20, 97, 111, 76, 77, 212, 130, 22, 128, 66,
	18, 49, 10, 12, 13, 121, 120, 88, 117, 44,
	7, 105, 25, 85, 40, 27, 42, 86, 16, 190,
	191, 30, 200, 99, 47, 34, 70, 64, 67, 50,
	68, 14, 45, 215, 214, 87, 112, 195, 43, 6,
	199, 29, 126, 41, 75, 119, 65, 216, 5, 122,
	8, 48, 123, 192, 193, 194, 32, 213, 74, 11,
	-108, 54, -103, -113, -113, 57, -113, 221, -113, -113,
	-113, -113, -113, -113, -7, -83, 16, 15, -10, -8,
	-153, 6, 19, 20, -29, 38, 39, -24, -94, -46,
	-108, 10, -89, -116, -90, 225, 224, -105, -92, -104,
	-102, 157, 154, 226, 109, 31, 116, 175, 185, 208,
	-146, -142, 54, -97, 121, 117, -97, 116, -96, 121,
	54, -96, -46, -46, -113, 10, 175, 10, 116, 187,
	-113, -113, 181, -113, 184, -113, -113, -154, 53, -84,
	18, 30, -37, -53, 70, -58, 28, 22, -57, -54,
	-72, -70, -71, 104, 93, 94, 101, 71, 105, -62,
	-60, -61, -63, 56, 55, 57, 58, 59, 60, 64,
	65, 66, -104, -108, -68, -153, 42, 43, 196, 197,
	200, 198, 73, 32, 186, 194, 193, 192, 190, 191,
	188, 189, 121, 187, 99, 195, 54, -103, -80, -81,
	-37, -79, -7, -23, 34, -27, 20, 62, -47, 25,
	-46, 29, 106, -46, 52, -89, 78, -91, -104, 56,
	28, 29, 15, 53, 52, -119, -122, -124, -123, -120,
	-121, 151, 152, 104, 155, 158, 159, 160, 161, 162,
	163, 164, 165, 166, 167, 129, 147, 148, 149, 150,
	134, 135, 136, 137, 138, 139, 140, 142, 143, 144,
	145, 146, -108, 70, 54, -46, -46, -46, 22, 50,
	-108, -46, -48, 10, -46, -46, -46, -32, 10, -48,
	8, 88, 69, 68, 85, 52, 17, -37, -55, 88,
	70, 86, 87, 72, 90, 89, 100, 93, 94, 95,
	96, 97, 98, 99, 91, 92, 103, 78, 79, 80,
	81, 82, 83, 84, -95, -153, -71, -153, 107, 108,
	-58, -58, -58, -58, -58, -58, -153, 106, -7, -66,
	-37, -153, -153, -153, -153, -153, -153, -153, -75, -37,
	-153, -156, -153, -156, -156, -156, -156, -156, -156, -156,
	-153, -153, -153, -153, 52, -82, 23, 24, -83, -154,
	-29, -59, -104, 57, 60, -28, 41, -56, 29, 32,
	-7, -153, -46, -87, -88, -72, -104, -108, -109, -108,
	-102, -52, 11, -90, -37, -130, 103, 210, -147, -132,
	218, -142, -143, -148, 124, 122, -144, 117, 27, -138,
	64, 70, -134, 172, -125, 51, -125, -125, -125, -125,
	-129, 154, -129, -129, -129, 51, -125, -125, -125, -136,
	51, -136, -136, -137, 51, -137, 22, 50, -98, 112,
	218, 196, 114, 111, 115, 110, 169, 154, 63, 28,
	14, 207, 54, -46, -113, -52, -46, -113, -113, -113,
	-83, 183, -113, 36, -37, -37, -64, 64, 70, 65,
	66, -37, -37, -58, -65, -68, -71, 61, 88, 86,
	87, 72, -58, -58, -58, -58, -58, -58, -58, -58,
	-58, -58, -58, -58, -58, -58, -58, -115, 54, 56,
	54, -57, -57, -104, -35, 20, -34, -36, 95, -37,
	-108, -105, -109, -102, -154, 52, -154, -7, -34, -34,
	-37, -37, -34, -27, -73, -74, 74, -104, -154, -34,
	-35, -34, -34, -81, -84, -93, 18, 10, 32, 32,
	-34, -86, 50, -87, -67, -69, -68, -153, -7, -85,
	-104, -52, 52, 78, 106, -79, -37, 54, -153, -133,
	169, 78, 51, 27, -144, 54, 54, -126, 28, 64,
	-135, 173, 57, -129, -129, -130, 29, -130, -130, -130,
	-141, 56, 57, 57, -46, -113, -99, -100, 119, 21,
	117, 27, 78, 119, 125, 125, 125, -113, -113, 56,
	37, 64, 65, 66, -65, -58, -58, -58, -33, 130,
	69, -154, -154, -34, 52, -107, -106, 21, -104, 56,
	106, -153, 106, -37, -154, -154, -154, 52, 123, 21,
	-154, -34, -76, -74, 76, -37, -154, -154, -154, -154,
	-154, -46, -38, 10, 26, -86, 52, -154, -154, -154,
	52, 106, -79, -88, -37, -105, -83, 54, -131, 28,
	78, 54, -150, -149, -104, 54, -127, 50, 56, 57,
	58, 64, 186, 53, -130, -130, 54, 104, 53, 52,
	52, 53, 52, -114, -153, -105, -46, -113, 54, 154,
	-145, 54, -142, -33, 69, -58, -58, -154, -36, -106,
	95, -109, -35, -105, -117, 104, 151, 129, 149, 145,
	166, 156, 171, 147, 172, -115, -117, 201, -79, 77,
	-37, 75, -52, -39, -40, -41, -42, -49, -71, -153,
	-46, 27, -69, 32, -7, -153, -104, -104, -83, -154,
	157, 57, 53, 52, -125, -139, 169, 8, 56, 57,
	57, 29, -58, 106, -154, -154, -125, -125, -125, -137,
	-125, 139, -125, 139, -154, -154, -153, -31, 199, -37,
	-77, 12, 52, -43, -44, -45, 40, 44, 46, 41,
	42, 43, 47, -112, 21, -39, -153, -111, -110, 21,
	-108, 56, 8, -67, -7, 106, -114, 78, -149, -140,
	124, 27, 122, 186, 53, 53, 54, 95, -129, 54,
	-58, -154, 56, -78, 13, 15, -40, -41, -40, -41,
	40, 40, 40, 45, 40, 45, 40, -44, -108, -154,
	-50, 48, 120, 49, -110, -87, -154, -104, 54, -128,
	63, 27, 27, -30, 88, 204, -37, -66, 50, 50,
	40, 40, 117, 117, 117, 56, -154, 202, 47, 205,
	-37, -37, -153, -153, -153, 37, 203, 206, -51, -104,
	-51, -51, 37, -154, 52, -154, -154, 204, -104, 205,
	206,
}
var yyDef = [...]int{

	0, -2, 2, -2, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
	397, 0, 183, 183, 183, 183, 183, 0, 466, 449,
	0, 0, 0, 0, 0, 633, 633, 0, 633, 0,
	633, 633, 633, 633, 633, 633, 0, 31, 32, 631,
	1, 3, 405, 0, 0, 187, 190, 185, 449, 0,
	0, 0, 39, 0, 447, 0, 447, 467, 468, 469,
	470, 574, 575, 576, 577, 578, 579, 580, 581, 582,
	583, 584, 585, 586, 587, 588, 589, 590, 591, 592,
	593, 594, 595, 596, 597, 598, 599, 600, 601, 602,
	603, 604, 605, 606, 607, 608, 609, 610, 611, 612,
	613, 614, 615, 616, 617, 618, 619, 620, 621, 622,
	623, 624, 625, 626, 627, 628, 629, 630, 0, 450,
	445, 0, 445, 0, 0, 633, 556, 513, 557, 489,
	633, 633, 0, 633, 555, 160, 161, 162, 477, 478,
	479, 480, 481, 482, 483, 484, 485, 486, 487, 488,
	490, 491, 492, 493, 494, 495, 496, 497, 498, 499,
	500, 501, 502, 503, 504, 505, 506, 507, 508, 509,
	510, 511, 512, 514, 515, 516, 517, 518, 519, 520,
	521, 522, 523, 524, 525, 526, 527, 528, 529, 530,
	531, 532, 533, 534, 535, 536, 537, 538, 539, 540,
	541, 542, 543, 544, 545, 546, 547, 548, 549, 550,
	551, 552, 553, 554, 558, 559, 560, 561, 562, 563,
	564, 565, 566, 567, 568, 569, 570, 571, 572, 573,
	178, 473, 474, 153, 154, 633, 156, 633, 158, 159,
	179, 180, 181, 182, 25, 409, 0, 0, 397, 27,
	0, 183, 188, 189, 193, 191, 192, 184, 0, 0,
	243, 0, 35, 0, 433, 37, -2, 0, 0, 471,
	472, -2, 485, 439, 489, 513, 555, 556, 557, 0,
	0, 52, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 151, 152, 163, 0, 176, 0, 0, 0,
	169, 170, 174, 172, 176, 155, 157, 26, 632, 21,
	0, 0, 406, 253, 0, 258, 260, 0, 295, 296,
	297, 298, 299, 0, 0, 0, 0, 0, 0, 321,
	322, 323, 324, 383, 384, 385, 386, 387, 388, 389,
	262, 263, 380, 0, 429, 0, 0, 0, 0, 0,
	0, 0, 371, 0, 345, 345, 345, 345, 345, 345,
	345, 345, 0, 0, 0, 0, -2, -2, 398, 399,
	402, 405, 25, 190, 0, 195, 194, 186, 0, 0,
	242, 0, 0, 251, 0, 36, 0, 121, 440, 441,
	442, 438, 0, 46, 0, 105, 101, 57, 58, 94,
	60, 94, 94, 94, 94, 118, 118, 118, 118, 86,
	87, 88, 89, 90, 0, 73, 94, 94, 94, 77,
	61, 62, 63, 64, 65, 66, 67, 96, 96, 96,
	98, 98, 41, 0, 0, 43, 0, 148, 446, 0,
	150, 633, 251, 0, 633, 633, 633, 405, 0, 633,
	410, 0, 0, 0, 0, 0, 0, 256, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 280, 281, 282,
	283, 284, 285, 286, 259, 0, 273, 0, 0, 0,
	315, 316, 317, 318, 319, 0, 197, 0, 25, 0,
	293, 0, 0, 0, 0, 0, 0, 193, 0, 372,
	0, 337, 0, 338, 339, 340, 341, 342, 343, 344,
	0, 197, 0, 0, 0, 401, 403, 404, 409, 28,
	193, 0, 390, 0, 0, 0, 196, 422, 0, 0,
	-2, 0, 241, 251, 430, 0, 380, 0, 244, 475,
	476, 397, 0, 434, 435, 436, 0, 0, 44, 50,
	0, 53, 54, 0, 0, 0, 0, 135, 136, 108,
	106, 0, 103, 102, 59, 0, 118, 118, 80, 81,
	121, 0, 121, 121, 121, 0, 74, 75, 76, 68,
	0, 69, 70, 71, 0, 72, 448, 0, 633, 461,
	0, 458, 0, 456, 0, 451, 452, 453, 454, 455,
	457, 459, 460, 149, 164, 633, 177, 166, 167, 168,
	633, 0, 173, 0, 254, 255, 257, 274, 0, 276,
	278, 407, 408, 264, 265, 289, 290, 291, 0, 0,
	0, 0, 287, 269, 0, 300, 301, 302, 303, 304,
	305, 306, 307, 308, 309, 310, 311, 314, 356, 357,
	0, 312, 313, 320, 0, 0, 198, 199, 201, 205,
	0, 381, 0, -2, 292, 0, 428, 25, 0, 0,
	0, 0, 0, 0, 378, 375, 0, 0, 346, 0,
	0, 0, 0, 400, 22, 0, 443, 444, 391, 392,
	210, 29, 0, 422, 412, 424, 426, 0, 25, 0,
	418, 397, 0, 0, 0, 405, 252, 122, 0, 48,
	0, 0, 0, 131, 0, 133, 134, 114, 0, 107,
	56, 104, 0, 121, 121, 82, 0, 83, 84, 85,
	0, 92, 0, 0, 634, 140, 0, 633, 462, 463,
	464, 465, 0, 0, 0, 0, 0, 165, 171, 175,
	411, 275, 277, 279, 266, 287, 270, 0, 267, 0,
	0, 261, 325, 0, 0, 202, 206, 0, 208, 209,
	0, 197, 0, 294, -2, 328, 329, 0, 0, 0,
	0, 397, 0, 376, 0, 0, 336, 347, 348, 349,
	350, 23, 251, 0, 0, 30, 0, 427, -2, 0,
	0, 0, 405, 431, 432, 381, 34, 0, 45, 0,
	0, 47, 0, 137, 94, 132, 116, 0, 109, 110,
	111, 112, 113, 95, 78, 79, 119, 120, 91, 0,
	0, 99, 0, 42, 635, 636, 141, 142, 143, 0,
	145, 146, 147, 268, 0, 288, 271, 326, 200, 207,
	203, 0, 0, 382, 0, 94, 94, 361, 94, 98,
	364, 94, 366, 94, 369, 0, 0, 0, 373, 335,
	379, 0, 393, 211, 212, 214, 215, 216, 224, 0,
	226, 0, 425, 0, -2, 0, 420, 419, 33, 634,
	0, 51, 130, 0, 139, 123, 117, 0, 93, 0,
	0, 0, 272, 0, 327, 330, 358, 118, 362, 363,
	365, 367, 368, 370, 332, 331, 0, 0, 0, 377,
	395, 0, 0, 0, 0, 0, 231, 0, 0, 234,
	0, 0, 0, 0, 225, 0, 0, 245, 227, 0,
	229, 230, 0, 415, 25, 0, 40, 0, 138, 128,
	0, 125, 127, 115, 97, 100, 144, 204, 359, 360,
	351, 334, 374, 24, 0, 0, 213, 220, 0, 223,
	232, 233, 235, 0, 237, 0, 239, 240, 217, 218,
	219, 0, 0, 0, 228, 423, -2, 421, 49, 55,
	0, 124, 126, 0, 0, 0, 396, 394, 0, 0,
	236, 238, 0, 0, 0, 129, 333, 0, 0, 0,
	221, 222, 0, 0, 0, 352, 0, 355, 0, 249,
	0, 0, 353, 246, 0, 247, 248, 0, 250, 0,
	354,
}
var yyTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 71, 3, 3, 3, 98, 90, 3,
	51, 53, 95, 93, 52, 94, 106, 96, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 227,
	79, 78, 80, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 100, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 89, 3, 101,
}
var yyTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 54,
	55, 56, 57, 58, 59, 60, 61, 62, 63, 64,
	65, 66, 67, 68, 69, 70, 72, 73, 74, 75,
	76, 77, 81, 82, 83, 84, 85, 86, 87, 88,
	91, 92, 97, 99, 102, 103, 104, 105, 107, 108,
	109, 110, 111, 112, 113, 114, 115, 116, 117, 118,
	119, 120, 121, 122, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226,
}
var yyTok3 = [...]int{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:274
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:279
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:280
		{
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:284
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 21:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:306
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 22:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:314
		{
			yyVAL.selStmt = &Union{Type: yyDollar[2].str, Left: yyDollar[1].selStmt, Right: yyDollar[3].selStmt, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].str}
		}
	case 23:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:318
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, SelectExprs: SelectExprs{Nextval{Expr: yyDollar[5].expr}}, From: TableExprs{&AliasedTableExpr{Expr: yyDollar[7].tableName}}}
		}
	case 24:
		yyDollar = yyS[yypt-10 : yypt+1]
		//line sql.y:325
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, Distinct: yyDollar[4].str, Hints: yyDollar[5].str, SelectExprs: yyDollar[6].selectExprs, From: yyDollar[7].tableExprs, Where: NewWhere(WhereStr, yyDollar[8].expr), GroupBy: GroupBy(yyDollar[9].exprs), Having: NewWhere(HavingStr, yyDollar[10].expr)}
		}
	case 25:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:331
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 26:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:335
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 27:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:341
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 28:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:345
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 29:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:352
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[5].ins
			ins.Action = yyDollar[1].str
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].str
			ins.Table = yyDollar[4].tableName
			ins.OnDup = OnDup(yyDollar[6].updateExprs)
			yyVAL.statement = ins
		}
	case 30:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:363
		{
			cols := make(Columns, 0, len(yyDollar[6].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[7].updateExprs))
			for _, updateList := range yyDollar[6].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[7].updateExprs)}
		}
	case 31:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:375
		{
			yyVAL.str = InsertStr
		}
	case 32:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:379
		{
			yyVAL.str = ReplaceStr
		}
	case 33:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:385
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), Table: yyDollar[3].tableName, Exprs: yyDollar[5].updateExprs, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 34:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:391
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Table: yyDollar[4].tableName, Where: NewWhere(WhereStr, yyDollar[5].expr), OrderBy: yyDollar[6].orderBy, Limit: yyDollar[7].limit}
		}
	case 35:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:397
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setExprs}
		}
	case 36:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:401
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[4].setExprs}
		}
	case 37:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:407
		{
			yyVAL.str = SessionStr
		}
	case 38:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:411
		{
			yyVAL.str = GlobalStr
		}
	case 39:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:418
		{
			yyDollar[1].ddl.Action = CreateTableStr
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			yyVAL.statement = yyDollar[1].ddl
		}
	case 40:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line sql.y:424
		{
			yyDollar[1].ddl.Action = CreateTableStr
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			yyDollar[1].ddl.PartitionName = string(yyDollar[7].bytes)
			yyVAL.statement = yyDollar[1].ddl
		}
	case 41:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:431
		{
			var ifnotexists bool
			if yyDollar[3].byt != 0 {
				ifnotexists = true
			}
			yyVAL.statement = &DDL{Action: CreateDBStr, IfNotExists: ifnotexists, Database: yyDollar[4].tableIdent}
		}
	case 42:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:439
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: CreateIndexStr, IndexName: string(yyDollar[4].bytes), Table: yyDollar[6].tableName, NewName: yyDollar[6].tableName}
		}
	case 43:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:446
		{
			var ifnotexists bool
			if yyDollar[3].byt != 0 {
				ifnotexists = true
			}
			yyVAL.ddl = &DDL{Action: CreateTableStr, IfNotExists: ifnotexists, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
			setDDL(yylex, yyVAL.ddl)
		}
	case 44:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:457
		{
			yyVAL.TableSpec = yyDollar[2].TableSpec
			yyVAL.TableSpec.Options = yyDollar[4].TableOptions
		}
	case 45:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:464
		{
			yyVAL.TableOptions.Engine = yyDollar[1].str
			yyVAL.TableOptions.Charset = yyDollar[3].str
		}
	case 46:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:470
		{
			yyVAL.str = ""
		}
	case 47:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:474
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 48:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:479
		{
			yyVAL.str = ""
		}
	case 49:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:483
		{
			yyVAL.str = string(yyDollar[4].bytes)
		}
	case 50:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:488
		{
			yyVAL.str = ""
		}
	case 51:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:492
		{
		}
	case 52:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:498
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.AddColumn(yyDollar[1].columnDefinition)
		}
	case 53:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:503
		{
			yyVAL.TableSpec.AddColumn(yyDollar[3].columnDefinition)
		}
	case 54:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:507
		{
			yyVAL.TableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 55:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:513
		{
			yyDollar[2].columnType.NotNull = yyDollar[3].boolVal
			yyDollar[2].columnType.Default = yyDollar[4].optVal
			yyDollar[2].columnType.OnUpdate = yyDollar[5].optVal
			yyDollar[2].columnType.Autoincrement = yyDollar[6].boolVal
			yyDollar[2].columnType.KeyOpt = yyDollar[7].colKeyOpt
			yyDollar[2].columnType.Comment = yyDollar[8].optVal
			yyVAL.columnDefinition = &ColumnDefinition{Name: NewColIdent(string(yyDollar[1].bytes)), Type: yyDollar[2].columnType}
		}
	case 56:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:524
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolVal
			yyVAL.columnType.Zerofill = yyDollar[3].boolVal
		}
	case 59:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:534
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Length = yyDollar[2].optVal
		}
	case 60:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:539
		{
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 61:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:545
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 62:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:549
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 63:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:553
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 64:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:557
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 65:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:561
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 66:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:565
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 67:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:569
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 68:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:575
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 69:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:581
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 70:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:587
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 71:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:593
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 72:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:599
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 73:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:607
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 74:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:611
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 75:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:615
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 76:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:619
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 77:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:623
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 78:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:629
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 79:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:633
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 80:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:637
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 81:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:641
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 82:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:645
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 83:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:649
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 84:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:653
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 85:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:657
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 86:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:661
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 87:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:665
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 88:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:669
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 89:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:673
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 90:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:677
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 91:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:681
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs}
		}
	case 92:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:687
		{
			yyVAL.strs = make([]string, 0, 4)
			yyVAL.strs = append(yyVAL.strs, "'"+string(yyDollar[1].bytes)+"'")
		}
	case 93:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:692
		{
			yyVAL.strs = append(yyDollar[1].strs, "'"+string(yyDollar[3].bytes)+"'")
		}
	case 94:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:697
		{
			yyVAL.optVal = nil
		}
	case 95:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:701
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 96:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:706
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 97:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:710
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 98:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:718
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 99:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:722
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
			}
		}
	case 100:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:728
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 101:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:736
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 102:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:740
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 103:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:745
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 104:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:749
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 105:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:755
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 106:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:759
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 107:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:763
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 108:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:768
		{
			yyVAL.optVal = nil
		}
	case 109:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:772
		{
			yyVAL.optVal = NewStrVal(yyDollar[2].bytes)
		}
	case 110:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:776
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 111:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:780
		{
			yyVAL.optVal = NewFloatVal(yyDollar[2].bytes)
		}
	case 112:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:784
		{
			yyVAL.optVal = NewValArg(yyDollar[2].bytes)
		}
	case 113:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:788
		{
			yyVAL.optVal = NewValArg(yyDollar[2].bytes)
		}
	case 114:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:793
		{
			yyVAL.optVal = nil
		}
	case 115:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:797
		{
			yyVAL.optVal = NewValArg(yyDollar[3].bytes)
		}
	case 116:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:802
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 117:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:806
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 118:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:811
		{
			yyVAL.str = ""
		}
	case 119:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:815
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 120:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:819
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 121:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:824
		{
			yyVAL.str = ""
		}
	case 122:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:828
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 123:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:833
		{
			yyVAL.colKeyOpt = ColKeyNone
		}
	case 124:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:837
		{
			yyVAL.colKeyOpt = ColKeyPrimary
		}
	case 125:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:841
		{
			yyVAL.colKeyOpt = ColKey
		}
	case 126:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:845
		{
			yyVAL.colKeyOpt = ColKeyUniqueKey
		}
	case 127:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:849
		{
			yyVAL.colKeyOpt = ColKeyUnique
		}
	case 128:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:854
		{
			yyVAL.optVal = nil
		}
	case 129:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:858
		{
			yyVAL.optVal = NewStrVal(yyDollar[2].bytes)
		}
	case 130:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:864
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns}
		}
	case 131:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:870
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent("PRIMARY"), Primary: true, Unique: true}
		}
	case 132:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:874
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Unique: true}
		}
	case 133:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:878
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: true}
		}
	case 134:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:882
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: false}
		}
	case 135:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:888
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 136:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:892
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 137:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:898
		{
			yyVAL.indexColumns = []*IndexColumn{yyDollar[1].indexColumn}
		}
	case 138:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:902
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 139:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:908
		{
			yyVAL.indexColumn = &IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].optVal}
		}
	case 140:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:914
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 141:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:918
		{
			// Change this to a rename statement
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[4].tableName, NewName: yyDollar[7].tableName}
		}
	case 142:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:923
		{
			// Rename an index can just be an alter
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 143:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:928
		{
			yyVAL.statement = &DDL{Action: AlterEngineStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName, Engine: string(yyDollar[7].bytes)}
		}
	case 144:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line sql.y:932
		{
			yyVAL.statement = &DDL{Action: AlterCharsetStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName, Charset: string(yyDollar[9].bytes)}
		}
	case 145:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:936
		{
			yyVAL.statement = &DDL{Action: AlterAddColumnStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName, TableSpec: yyDollar[7].TableSpec}
		}
	case 146:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:940
		{
			yyVAL.statement = &DDL{Action: AlterDropColumnStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName, DropColumnName: string(yyDollar[7].bytes)}
		}
	case 147:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:944
		{
			yyVAL.statement = &DDL{Action: AlterModifyColumnStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName, ModifyColumnDef: yyDollar[7].columnDefinition}
		}
	case 148:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:951
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropTableStr, Table: yyDollar[4].tableName, IfExists: exists}
		}
	case 149:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:959
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: DropIndexStr, IndexName: string(yyDollar[3].bytes), Table: yyDollar[5].tableName, NewName: yyDollar[5].tableName}
		}
	case 150:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:964
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropDBStr, Database: yyDollar[4].tableIdent, IfExists: exists}
		}
	case 151:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:974
		{
			yyVAL.statement = &DDL{Action: TruncateTableStr, Table: yyDollar[3].tableName, NewName: yyDollar[3].tableName}
		}
	case 152:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:980
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName, NewName: yyDollar[3].tableName}
		}
	case 153:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:986
		{
			yyVAL.statement = &Xa{}
		}
	case 154:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:992
		{
			yyVAL.statement = &Explain{}
		}
	case 155:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:998
		{
			yyVAL.statement = &Kill{QueryID: &NumVal{raw: string(yyDollar[2].bytes)}}
		}
	case 156:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1004
		{
			yyVAL.statement = &Transaction{Action: BeginTxnStr}
		}
	case 157:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1008
		{
			yyVAL.statement = &Transaction{Action: StartTxnStr}
		}
	case 158:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1012
		{
			yyVAL.statement = &Transaction{Action: RollbackTxnStr}
		}
	case 159:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1016
		{
			yyVAL.statement = &Transaction{Action: CommitTxnStr}
		}
	case 160:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1022
		{
			yyVAL.str = ShowUnsupportedStr
		}
	case 161:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1026
		{
			switch v := string(yyDollar[1].bytes); v {
			case ShowDatabasesStr, ShowTablesStr, ShowEnginesStr, ShowVersionsStr, ShowProcesslistStr, ShowQueryzStr, ShowTxnzStr, ShowColumnsStr:
				yyVAL.str = v
			default:
				yyVAL.str = ShowUnsupportedStr
			}
		}
	case 162:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1035
		{
			yyVAL.str = ShowUnsupportedStr
		}
	case 163:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1041
		{
			yyVAL.statement = &Show{Type: yyDollar[2].str}
		}
	case 164:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1045
		{
			yyVAL.statement = &Show{Type: ShowTablesStr, Database: yyDollar[4].tableName}
		}
	case 165:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1049
		{
			yyVAL.statement = &Show{Type: ShowFullTablesStr, Database: yyDollar[4].tableName, Where: NewWhere(WhereStr, yyDollar[5].expr)}
		}
	case 166:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1053
		{
			yyVAL.statement = &Show{Type: ShowColumnsStr, Table: yyDollar[4].tableName}
		}
	case 167:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1057
		{
			yyVAL.statement = &Show{Type: ShowCreateTableStr, Table: yyDollar[4].tableName}
		}
	case 168:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1061
		{
			yyVAL.statement = &Show{Type: ShowCreateDatabaseStr, Database: yyDollar[4].tableName}
		}
	case 169:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1065
		{
			yyVAL.statement = &Show{Type: ShowWarningsStr}
		}
	case 170:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1069
		{
			yyVAL.statement = &Show{Type: ShowVariablesStr}
		}
	case 171:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1073
		{
			yyVAL.statement = &Show{Type: ShowBinlogEventsStr, From: yyDollar[4].str, Limit: yyDollar[5].limit}
		}
	case 172:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1077
		{
			yyVAL.statement = &Show{Type: ShowStatusStr}
		}
	case 173:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1081
		{
			yyVAL.statement = &Show{Type: ShowTableStatusStr, Database: yyDollar[4].tableName}
		}
	case 174:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1086
		{
			yyVAL.str = ""
		}
	case 175:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1090
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 176:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1095
		{
			yyVAL.tableName = TableName{}
		}
	case 177:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1099
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 178:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1105
		{
			yyVAL.statement = &Use{DBName: yyDollar[2].tableIdent}
		}
	case 179:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1111
		{
			yyVAL.statement = &OtherRead{}
		}
	case 180:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1115
		{
			yyVAL.statement = &OtherRead{}
		}
	case 181:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1119
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 182:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1123
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 183:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1128
		{
			setAllowComments(yylex, true)
		}
	case 184:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1132
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 185:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1138
		{
			yyVAL.bytes2 = nil
		}
	case 186:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1142
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 187:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1148
		{
			yyVAL.str = UnionStr
		}
	case 188:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1152
		{
			yyVAL.str = UnionAllStr
		}
	case 189:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1156
		{
			yyVAL.str = UnionDistinctStr
		}
	case 190:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1161
		{
			yyVAL.str = ""
		}
	case 191:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1165
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 192:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1169
		{
			yyVAL.str = SQLCacheStr
		}
	case 193:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1174
		{
			yyVAL.str = ""
		}
	case 194:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1178
		{
			yyVAL.str = DistinctStr
		}
	case 195:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1183
		{
			yyVAL.str = ""
		}
	case 196:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1187
		{
			yyVAL.str = StraightJoinHint
		}
	case 197:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1192
		{
			yyVAL.selectExprs = nil
		}
	case 198:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1196
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 199:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1202
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 200:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1206
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 201:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1212
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 202:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1216
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 203:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1220
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 204:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1224
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 205:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1229
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 206:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1233
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 207:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1237
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 209:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1244
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 210:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1249
		{
			yyVAL.tableExprs = TableExprs{&AliasedTableExpr{Expr: TableName{Name: NewTableIdent("dual")}}}
		}
	case 211:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1253
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 212:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1259
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 213:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1263
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 216:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1273
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 217:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1277
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 218:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1281
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 219:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1287
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, As: yyDollar[2].tableIdent, Hints: yyDollar[3].indexHints}
		}
	case 220:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1300
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 221:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1304
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, On: yyDollar[5].expr}
		}
	case 222:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1308
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, On: yyDollar[5].expr}
		}
	case 223:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1312
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 224:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1317
		{
			yyVAL.empty = struct{}{}
		}
	case 225:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1319
		{
			yyVAL.empty = struct{}{}
		}
	case 226:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1322
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 227:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1326
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 228:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1330
		{
			yyVAL.tableIdent = yyDollar[2].tableIdent
		}
	case 230:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1337
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 231:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1343
		{
			yyVAL.str = JoinStr
		}
	case 232:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1347
		{
			yyVAL.str = JoinStr
		}
	case 233:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1351
		{
			yyVAL.str = JoinStr
		}
	case 234:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1355
		{
			yyVAL.str = StraightJoinStr
		}
	case 235:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1361
		{
			yyVAL.str = LeftJoinStr
		}
	case 236:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1365
		{
			yyVAL.str = LeftJoinStr
		}
	case 237:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1369
		{
			yyVAL.str = RightJoinStr
		}
	case 238:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1373
		{
			yyVAL.str = RightJoinStr
		}
	case 239:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1379
		{
			yyVAL.str = NaturalJoinStr
		}
	case 240:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1383
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 241:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1393
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 242:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1397
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 243:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1403
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 244:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1407
		{
			yyVAL.tableName = TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 245:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1412
		{
			yyVAL.indexHints = nil
		}
	case 246:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1416
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].colIdents}
		}
	case 247:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1420
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].colIdents}
		}
	case 248:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1424
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].colIdents}
		}
	case 249:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1430
		{
			yyVAL.colIdents = []ColIdent{yyDollar[1].colIdent}
		}
	case 250:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1434
		{
			yyVAL.colIdents = append(yyDollar[1].colIdents, yyDollar[3].colIdent)
		}
	case 251:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1439
		{
			yyVAL.expr = nil
		}
	case 252:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1443
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 253:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1449
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 254:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1453
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 255:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1457
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 256:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1461
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 257:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1465
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 258:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1469
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 259:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1473
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 260:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1479
		{
			yyVAL.str = ""
		}
	case 261:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1483
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 262:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1489
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 263:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1493
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 264:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1499
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 265:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1503
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 266:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1507
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 267:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1511
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 268:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1515
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 269:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1519
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 270:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1523
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 271:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1527
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 272:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1531
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 273:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1535
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 274:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1541
		{
			yyVAL.str = IsNullStr
		}
	case 275:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1545
		{
			yyVAL.str = IsNotNullStr
		}
	case 276:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1549
		{
			yyVAL.str = IsTrueStr
		}
	case 277:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1553
		{
			yyVAL.str = IsNotTrueStr
		}
	case 278:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1557
		{
			yyVAL.str = IsFalseStr
		}
	case 279:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1561
		{
			yyVAL.str = IsNotFalseStr
		}
	case 280:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1567
		{
			yyVAL.str = EqualStr
		}
	case 281:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1571
		{
			yyVAL.str = LessThanStr
		}
	case 282:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1575
		{
			yyVAL.str = GreaterThanStr
		}
	case 283:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1579
		{
			yyVAL.str = LessEqualStr
		}
	case 284:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1583
		{
			yyVAL.str = GreaterEqualStr
		}
	case 285:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1587
		{
			yyVAL.str = NotEqualStr
		}
	case 286:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1591
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 287:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1596
		{
			yyVAL.expr = nil
		}
	case 288:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1600
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 289:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1606
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 290:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1610
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 291:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1614
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 292:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1620
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 293:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1626
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 294:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1630
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 295:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1636
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 296:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1640
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 297:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1644
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 298:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1648
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 299:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1652
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 300:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1656
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 301:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1660
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 302:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1664
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 303:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1668
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 304:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1672
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 305:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1676
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 306:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1680
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 307:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1684
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 308:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1688
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 309:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1692
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 310:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1696
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 311:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1700
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 312:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1704
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 313:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1708
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 314:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1712
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 315:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1716
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 316:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1720
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 317:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1728
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 318:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1742
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 319:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1746
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 320:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1750
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: yyDollar[3].colIdent}
		}
	case 325:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1768
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs}
		}
	case 326:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1772
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 327:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1776
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 328:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1786
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 329:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1790
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 330:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1794
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 331:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1798
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 332:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1802
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 333:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line sql.y:1806
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 334:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1810
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str}
		}
	case 335:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1814
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 336:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1818
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colIdent}
		}
	case 337:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1828
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 338:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1832
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 339:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1836
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 340:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1840
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 341:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1845
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 342:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1850
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 343:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1855
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 344:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1860
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 347:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1874
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 348:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1878
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 349:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1882
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 350:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1886
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 351:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1892
		{
			yyVAL.str = ""
		}
	case 352:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1896
		{
			yyVAL.str = BooleanModeStr
		}
	case 353:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1900
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 354:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1904
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 355:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1908
		{
			yyVAL.str = QueryExpansionStr
		}
	case 356:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1914
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 357:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1918
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 358:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1924
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 359:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1928
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Operator: CharacterSetStr}
		}
	case 360:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1932
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: string(yyDollar[3].bytes)}
		}
	case 361:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1936
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 362:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1940
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 363:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1944
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 364:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1950
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 365:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1954
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 366:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1958
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 367:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1962
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 368:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1966
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 369:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1970
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 370:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1974
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 371:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1979
		{
			yyVAL.expr = nil
		}
	case 372:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1983
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 373:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1988
		{
			yyVAL.str = string("")
		}
	case 374:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1992
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 375:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1998
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 376:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2002
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 377:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2008
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 378:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2013
		{
			yyVAL.expr = nil
		}
	case 379:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2017
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 380:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2023
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 381:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2027
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 382:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2031
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 383:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2037
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 384:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2041
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 385:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2045
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 386:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2049
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 387:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2053
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 388:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2057
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 389:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2061
		{
			yyVAL.expr = &NullVal{}
		}
	case 390:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2067
		{
			// TODO(sougou): Deprecate this construct.
			if yyDollar[1].colIdent.Lowered() != "value" {
				yylex.Error("expecting value after next")
				return 1
			}
			yyVAL.expr = NewIntVal([]byte("1"))
		}
	case 391:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2076
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 392:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2080
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 393:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2085
		{
			yyVAL.exprs = nil
		}
	case 394:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2089
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 395:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2094
		{
			yyVAL.expr = nil
		}
	case 396:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2098
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 397:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2103
		{
			yyVAL.orderBy = nil
		}
	case 398:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2107
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 399:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2113
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 400:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2117
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 401:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2123
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 402:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2128
		{
			yyVAL.str = AscScr
		}
	case 403:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2132
		{
			yyVAL.str = AscScr
		}
	case 404:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2136
		{
			yyVAL.str = DescScr
		}
	case 405:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2141
		{
			yyVAL.limit = nil
		}
	case 406:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2145
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 407:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2149
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 408:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2153
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 409:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2158
		{
			yyVAL.str = ""
		}
	case 410:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2162
		{
			yyVAL.str = ForUpdateStr
		}
	case 411:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2166
		{
			yyVAL.str = ShareModeStr
		}
	case 412:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2179
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 413:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2183
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 414:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2187
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Rows: yyDollar[2].selStmt}
		}
	case 415:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2192
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 416:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2196
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 417:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:2200
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].selStmt}
		}
	case 418:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2207
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 419:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2211
		{
			yyVAL.columns = Columns{yyDollar[3].colIdent}
		}
	case 420:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2215
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 421:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2219
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[5].colIdent)
		}
	case 422:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2224
		{
			yyVAL.updateExprs = nil
		}
	case 423:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2228
		{
			yyVAL.updateExprs = yyDollar[5].updateExprs
		}
	case 424:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2234
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 425:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2238
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 426:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2244
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 427:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2248
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 428:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2254
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 429:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2260
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = &ParenExpr{yyDollar[1].valTuple[0]}
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 430:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2270
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 431:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2274
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 432:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2280
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 433:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2286
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 434:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2290
		{
			yyVAL.setExprs = append(yyDollar[1].setExprs, yyDollar[3].setExpr)
		}
	case 435:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2296
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: yyDollar[3].expr}
		}
	case 436:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2300
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Expr: yyDollar[2].expr}
		}
	case 438:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2307
		{
			yyVAL.bytes = []byte("charset")
		}
	case 440:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2314
		{
			yyVAL.expr = NewStrVal([]byte(yyDollar[1].colIdent.String()))
		}
	case 441:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2318
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 442:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2322
		{
			yyVAL.expr = &Default{}
		}
	case 445:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2332
		{
			yyVAL.byt = 0
		}
	case 446:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2334
		{
			yyVAL.byt = 1
		}
	case 447:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2337
		{
			yyVAL.byt = 0
		}
	case 448:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2339
		{
			yyVAL.byt = 1
		}
	case 449:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2342
		{
			yyVAL.str = ""
		}
	case 450:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2344
		{
			yyVAL.str = IgnoreStr
		}
	case 451:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2348
		{
			yyVAL.empty = struct{}{}
		}
	case 452:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2350
		{
			yyVAL.empty = struct{}{}
		}
	case 453:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2352
		{
			yyVAL.empty = struct{}{}
		}
	case 454:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2354
		{
			yyVAL.empty = struct{}{}
		}
	case 455:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2356
		{
			yyVAL.empty = struct{}{}
		}
	case 456:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2358
		{
			yyVAL.empty = struct{}{}
		}
	case 457:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2360
		{
			yyVAL.empty = struct{}{}
		}
	case 458:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2362
		{
			yyVAL.empty = struct{}{}
		}
	case 459:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2364
		{
			yyVAL.empty = struct{}{}
		}
	case 460:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2366
		{
			yyVAL.empty = struct{}{}
		}
	case 461:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2369
		{
			yyVAL.empty = struct{}{}
		}
	case 462:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2371
		{
			yyVAL.empty = struct{}{}
		}
	case 463:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2373
		{
			yyVAL.empty = struct{}{}
		}
	case 464:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2377
		{
			yyVAL.empty = struct{}{}
		}
	case 465:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2379
		{
			yyVAL.empty = struct{}{}
		}
	case 466:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2382
		{
			yyVAL.empty = struct{}{}
		}
	case 467:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2384
		{
			yyVAL.empty = struct{}{}
		}
	case 468:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2386
		{
			yyVAL.empty = struct{}{}
		}
	case 469:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2390
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 470:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2394
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 472:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2401
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 473:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2407
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 474:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2411
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 476:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2418
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 631:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2598
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 632:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2607
		{
			decNesting(yylex)
		}
	case 633:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2612
		{
			forceEOF(yylex)
		}
	case 634:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2617
		{
			forceEOF(yylex)
		}
	case 635:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2621
		{
			forceEOF(yylex)
		}
	case 636:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2625
		{
			forceEOF(yylex)
		}
	}
	goto yystack /* stack new state and value */
}
