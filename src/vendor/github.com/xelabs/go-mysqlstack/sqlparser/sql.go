//line sql.y:18
package sqlparser

import __yyfmt__ "fmt"

//line sql.y:18
func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex interface{}, ddl *DDL) {
	yylex.(*Tokenizer).partialDDL = ddl
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

func forceEOF(yylex interface{}) {
	yylex.(*Tokenizer).ForceEOF = true
}

//line sql.y:50
type yySymType struct {
	yys               int
	empty             struct{}
	statement         Statement
	selStmt           SelectStatement
	ddl               *DDL
	ins               *Insert
	byt               byte
	bytes             []byte
	bytes2            [][]byte
	str               string
	strs              []string
	selectExprs       SelectExprs
	selectExpr        SelectExpr
	columns           Columns
	colName           *ColName
	tableExprs        TableExprs
	tableExpr         TableExpr
	tableName         TableName
	indexHints        *IndexHints
	expr              Expr
	exprs             Exprs
	boolVal           BoolVal
	colTuple          ColTuple
	values            Values
	valTuple          ValTuple
	subquery          *Subquery
	whens             []*When
	when              *When
	orderBy           OrderBy
	order             *Order
	limit             *Limit
	updateExprs       UpdateExprs
	updateExpr        *UpdateExpr
	setExprs          SetExprs
	setExpr           *SetExpr
	colIdent          ColIdent
	colIdents         []ColIdent
	tableIdent        TableIdent
	convertType       *ConvertType
	aliasedTableName  *AliasedTableExpr
	TableSpec         *TableSpec
	TableOptions      TableOptions
	columnType        ColumnType
	colKeyOpt         ColumnKeyOption
	optVal            *SQLVal
	LengthScaleOption LengthScaleOption
	columnDefinition  *ColumnDefinition
	indexDefinition   *IndexDefinition
	indexInfo         *IndexInfo
	indexColumn       *IndexColumn
	indexColumns      []*IndexColumn
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const INSERT = 57349
const UPDATE = 57350
const DELETE = 57351
const FROM = 57352
const WHERE = 57353
const GROUP = 57354
const HAVING = 57355
const ORDER = 57356
const BY = 57357
const LIMIT = 57358
const OFFSET = 57359
const FOR = 57360
const ALL = 57361
const DISTINCT = 57362
const AS = 57363
const EXISTS = 57364
const ASC = 57365
const DESC = 57366
const INTO = 57367
const DUPLICATE = 57368
const KEY = 57369
const DEFAULT = 57370
const SET = 57371
const LOCK = 57372
const FULL = 57373
const CHECKSUM = 57374
const FULLTEXT = 57375
const PARSER = 57376
const NGRAM = 57377
const VALUES = 57378
const LAST_INSERT_ID = 57379
const NEXT = 57380
const VALUE = 57381
const SHARE = 57382
const MODE = 57383
const SQL_NO_CACHE = 57384
const SQL_CACHE = 57385
const JOIN = 57386
const STRAIGHT_JOIN = 57387
const LEFT = 57388
const RIGHT = 57389
const INNER = 57390
const OUTER = 57391
const CROSS = 57392
const NATURAL = 57393
const USE = 57394
const FORCE = 57395
const ON = 57396
const ID = 57397
const HEX = 57398
const STRING = 57399
const INTEGRAL = 57400
const FLOAT = 57401
const HEXNUM = 57402
const VALUE_ARG = 57403
const LIST_ARG = 57404
const COMMENT = 57405
const COMMENT_KEYWORD = 57406
const NULL = 57407
const TRUE = 57408
const FALSE = 57409
const OFF = 57410
const OR = 57411
const AND = 57412
const NOT = 57413
const BETWEEN = 57414
const CASE = 57415
const WHEN = 57416
const THEN = 57417
const ELSE = 57418
const END = 57419
const LE = 57420
const GE = 57421
const NE = 57422
const NULL_SAFE_EQUAL = 57423
const IS = 57424
const LIKE = 57425
const REGEXP = 57426
const IN = 57427
const SHIFT_LEFT = 57428
const SHIFT_RIGHT = 57429
const DIV = 57430
const MOD = 57431
const UNARY = 57432
const COLLATE = 57433
const BINARY = 57434
const INTERVAL = 57435
const JSON_EXTRACT_OP = 57436
const JSON_UNQUOTE_EXTRACT_OP = 57437
const CREATE = 57438
const ALTER = 57439
const DROP = 57440
const RENAME = 57441
const ANALYZE = 57442
const ADD = 57443
const MODIFY = 57444
const TABLE = 57445
const INDEX = 57446
const VIEW = 57447
const TO = 57448
const IGNORE = 57449
const IF = 57450
const UNIQUE = 57451
const USING = 57452
const PRIMARY = 57453
const COLUMN = 57454
const SHOW = 57455
const DESCRIBE = 57456
const EXPLAIN = 57457
const DATE = 57458
const ESCAPE = 57459
const REPAIR = 57460
const OPTIMIZE = 57461
const TRUNCATE = 57462
const BIT = 57463
const TINYINT = 57464
const SMALLINT = 57465
const MEDIUMINT = 57466
const INT = 57467
const INTEGER = 57468
const BIGINT = 57469
const INTNUM = 57470
const REAL = 57471
const DOUBLE = 57472
const FLOAT_TYPE = 57473
const DECIMAL = 57474
const NUMERIC = 57475
const TIME = 57476
const TIMESTAMP = 57477
const DATETIME = 57478
const YEAR = 57479
const CHAR = 57480
const VARCHAR = 57481
const BOOL = 57482
const CHARACTER = 57483
const VARBINARY = 57484
const NCHAR = 57485
const CHARSET = 57486
const TEXT = 57487
const TINYTEXT = 57488
const MEDIUMTEXT = 57489
const LONGTEXT = 57490
const BLOB = 57491
const TINYBLOB = 57492
const MEDIUMBLOB = 57493
const LONGBLOB = 57494
const JSON = 57495
const ENUM = 57496
const NULLX = 57497
const AUTO_INCREMENT = 57498
const APPROXNUM = 57499
const SIGNED = 57500
const UNSIGNED = 57501
const ZEROFILL = 57502
const DATABASES = 57503
const TABLES = 57504
const VITESS_KEYSPACES = 57505
const VITESS_SHARDS = 57506
const VSCHEMA_TABLES = 57507
const WARNINGS = 57508
const VARIABLES = 57509
const EVENTS = 57510
const BINLOG = 57511
const GTID = 57512
const STATUS = 57513
const COLUMNS = 57514
const CURRENT_TIMESTAMP = 57515
const DATABASE = 57516
const CURRENT_DATE = 57517
const CURRENT_TIME = 57518
const LOCALTIME = 57519
const LOCALTIMESTAMP = 57520
const UTC_DATE = 57521
const UTC_TIME = 57522
const UTC_TIMESTAMP = 57523
const REPLACE = 57524
const CONVERT = 57525
const CAST = 57526
const GROUP_CONCAT = 57527
const SEPARATOR = 57528
const MATCH = 57529
const AGAINST = 57530
const BOOLEAN = 57531
const LANGUAGE = 57532
const WITH = 57533
const QUERY = 57534
const EXPANSION = 57535
const UNUSED = 57536
const PARTITION = 57537
const PARTITIONS = 57538
const HASH = 57539
const XA = 57540
const ENGINES = 57541
const VERSIONS = 57542
const PROCESSLIST = 57543
const QUERYZ = 57544
const TXNZ = 57545
const KILL = 57546
const ENGINE = 57547
const SINGLE = 57548
const BEGIN = 57549
const START = 57550
const TRANSACTION = 57551
const COMMIT = 57552
const ROLLBACK = 57553
const GLOBAL = 57554
const SESSION = 57555
const NAMES = 57556

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"KEY",
	"DEFAULT",
	"SET",
	"LOCK",
	"FULL",
	"CHECKSUM",
	"FULLTEXT",
	"PARSER",
	"NGRAM",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"'('",
	"','",
	"')'",
	"ID",
	"HEX",
	"STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"NULL",
	"TRUE",
	"FALSE",
	"OFF",
	"OR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"MODIFY",
	"TABLE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"UNIQUE",
	"USING",
	"PRIMARY",
	"COLUMN",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"BIGINT",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"CHAR",
	"VARCHAR",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"CHARSET",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"ENUM",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"DATABASES",
	"TABLES",
	"VITESS_KEYSPACES",
	"VITESS_SHARDS",
	"VSCHEMA_TABLES",
	"WARNINGS",
	"VARIABLES",
	"EVENTS",
	"BINLOG",
	"GTID",
	"STATUS",
	"COLUMNS",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"GROUP_CONCAT",
	"SEPARATOR",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"PARTITION",
	"PARTITIONS",
	"HASH",
	"XA",
	"ENGINES",
	"VERSIONS",
	"PROCESSLIST",
	"QUERYZ",
	"TXNZ",
	"KILL",
	"ENGINE",
	"SINGLE",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"GLOBAL",
	"SESSION",
	"NAMES",
	"';'",
}
var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 3,
	5, 26,
	-2, 4,
	-1, 282,
	82, 599,
	-2, 39,
	-1, 287,
	82, 494,
	-2, 445,
	-1, 384,
	110, 481,
	-2, 477,
	-1, 385,
	110, 482,
	-2, 478,
	-1, 560,
	5, 26,
	-2, 421,
	-1, 694,
	110, 484,
	-2, 480,
	-1, 806,
	5, 27,
	-2, 300,
	-1, 830,
	5, 27,
	-2, 422,
	-1, 917,
	5, 26,
	-2, 424,
	-1, 1023,
	5, 27,
	-2, 425,
}

const yyPrivate = 57344

const yyLast = 7269

var yyAct = [...]int{

	385, 974, 519, 960, 360, 338, 1057, 907, 563, 845,
	866, 362, 601, 614, 571, 726, 261, 678, 725, 340,
	887, 971, 54, 688, 283, 790, 685, 575, 908, 297,
	72, 798, 564, 722, 70, 151, 706, 247, 64, 286,
	655, 387, 610, 327, 393, 693, 336, 280, 460, 278,
	325, 270, 363, 48, 53, 518, 3, 58, 253, 925,
	580, 577, 247, 295, 72, 924, 1069, 1056, 285, 250,
	1068, 1048, 1066, 984, 150, 586, 1055, 23, 49, 25,
	26, 687, 60, 61, 62, 63, 248, 1047, 900, 954,
	531, 990, 320, 631, 314, 44, 642, 851, 852, 853,
	27, 48, 318, 35, 260, 854, 312, 630, 753, 266,
	134, 135, 594, 932, 690, 741, 926, 872, 602, 996,
	949, 947, 304, 36, 778, 249, 51, 252, 777, 254,
	255, 256, 257, 258, 259, 776, 305, 633, 247, 247,
	300, 133, 988, 1018, 1020, 775, 629, 1042, 1032, 485,
	484, 494, 495, 487, 488, 489, 490, 491, 492, 493,
	486, 589, 333, 496, 589, 315, 771, 587, 1041, 589,
	1040, 888, 773, 301, 303, 244, 981, 138, 137, 508,
	509, 136, 939, 833, 29, 30, 31, 804, 33, 576,
	802, 735, 298, 626, 624, 620, 890, 623, 625, 517,
	746, 34, 45, 38, 400, 496, 46, 47, 32, 471,
	486, 859, 892, 496, 896, 1019, 891, 251, 889, 602,
	811, 474, 983, 894, 707, 842, 310, 855, 472, 591,
	774, 316, 317, 893, 319, 592, 742, 628, 895, 897,
	809, 989, 1046, 987, 474, 247, 489, 490, 491, 492,
	493, 486, 627, 595, 496, 588, 473, 472, 588, 307,
	585, 860, 584, 588, 1033, 734, 772, 662, 770, 404,
	50, 473, 472, 474, 902, 247, 473, 472, 247, 622,
	72, 660, 661, 659, 285, 72, 37, 389, 474, 406,
	632, 451, 39, 474, 751, 40, 41, 1028, 43, 42,
	247, 621, 395, 247, 247, 247, 936, 707, 247, 816,
	299, 810, 247, 935, 247, 247, 247, 927, 679, 48,
	680, 51, 390, 546, 547, 391, 648, 650, 651, 403,
	765, 658, 649, 783, 784, 785, 764, 322, 754, 323,
	324, 132, 485, 484, 494, 495, 487, 488, 489, 490,
	491, 492, 493, 486, 1044, 506, 496, 485, 484, 494,
	495, 487, 488, 489, 490, 491, 492, 493, 486, 467,
	999, 496, 473, 472, 473, 472, 934, 330, 388, 302,
	781, 904, 763, 791, 1063, 326, 326, 505, 507, 474,
	1025, 474, 993, 72, 958, 326, 992, 552, 247, 929,
	928, 247, 274, 72, 566, 565, 548, 285, 468, 298,
	469, 796, 326, 516, 874, 871, 521, 522, 523, 524,
	525, 526, 527, 848, 530, 532, 532, 532, 532, 532,
	532, 532, 532, 540, 541, 542, 543, 603, 604, 605,
	570, 549, 581, 550, 847, 476, 568, 477, 843, 561,
	573, 839, 560, 865, 864, 862, 861, 991, 247, 832,
	326, 55, 247, 616, 533, 534, 535, 536, 537, 538,
	539, 747, 738, 696, 326, 636, 681, 452, 520, 412,
	411, 856, 641, 306, 475, 529, 723, 572, 733, 612,
	613, 656, 696, 352, 351, 353, 354, 355, 356, 657,
	473, 472, 357, 796, 510, 511, 512, 513, 514, 515,
	733, 828, 825, 958, 863, 796, 72, 474, 402, 574,
	684, 544, 285, 487, 488, 489, 490, 491, 492, 493,
	486, 72, 733, 496, 51, 708, 21, 962, 965, 966,
	967, 963, 692, 964, 968, 596, 635, 1037, 1036, 638,
	639, 640, 23, 615, 643, 682, 683, 694, 796, 65,
	48, 743, 72, 566, 565, 611, 731, 724, 711, 695,
	697, 727, 704, 606, 521, 558, 850, 698, 732, 23,
	723, 618, 559, 709, 457, 23, 714, 645, 646, 267,
	652, 653, 715, 265, 736, 556, 962, 965, 966, 967,
	963, 51, 964, 968, 699, 700, 1039, 1038, 703, 916,
	755, 756, 728, 1011, 48, 1009, 1008, 729, 1012, 247,
	1010, 1007, 710, 1061, 712, 713, 271, 272, 51, 757,
	739, 759, 760, 761, 51, 1054, 520, 721, 51, 701,
	702, 654, 782, 644, 663, 664, 665, 666, 667, 668,
	669, 670, 671, 672, 673, 674, 675, 676, 677, 388,
	394, 745, 1013, 748, 966, 967, 720, 719, 1043, 1026,
	328, 656, 937, 597, 598, 599, 600, 758, 392, 657,
	409, 841, 329, 399, 750, 1030, 1029, 737, 607, 608,
	609, 72, 914, 744, 826, 800, 617, 456, 970, 394,
	786, 268, 269, 262, 1002, 410, 767, 494, 495, 487,
	488, 489, 490, 491, 492, 493, 486, 247, 718, 496,
	263, 55, 1001, 779, 957, 572, 717, 461, 780, 466,
	313, 311, 793, 277, 978, 933, 794, 470, 566, 565,
	285, 57, 815, 59, 72, 803, 52, 1, 846, 806,
	807, 808, 844, 838, 812, 834, 583, 578, 827, 818,
	837, 819, 820, 821, 822, 296, 835, 72, 795, 247,
	582, 285, 762, 361, 986, 694, 931, 590, 752, 829,
	830, 831, 593, 857, 858, 923, 813, 740, 579, 840,
	1027, 868, 849, 749, 415, 416, 414, 418, 417, 413,
	72, 139, 279, 969, 800, 72, 973, 285, 875, 285,
	245, 805, 797, 876, 67, 873, 769, 768, 619, 867,
	881, 504, 817, 787, 788, 789, 247, 692, 898, 886,
	885, 882, 899, 72, 72, 276, 901, 919, 920, 905,
	727, 877, 694, 520, 915, 911, 880, 906, 884, 836,
	716, 921, 284, 405, 730, 545, 870, 386, 1000, 956,
	814, 485, 484, 494, 495, 487, 488, 489, 490, 491,
	492, 493, 486, 792, 528, 496, 705, 339, 912, 647,
	350, 728, 347, 349, 918, 348, 551, 917, 557, 478,
	922, 337, 331, 485, 484, 494, 495, 487, 488, 489,
	490, 491, 492, 493, 486, 1017, 945, 496, 910, 396,
	961, 276, 276, 247, 247, 959, 909, 824, 465, 953,
	1031, 555, 24, 72, 56, 273, 14, 285, 727, 20,
	72, 903, 911, 982, 846, 979, 940, 15, 941, 985,
	72, 913, 13, 12, 285, 28, 10, 868, 9, 950,
	951, 8, 7, 952, 878, 879, 995, 6, 5, 247,
	247, 247, 247, 4, 886, 972, 1003, 264, 1005, 728,
	247, 48, 1014, 247, 980, 867, 247, 1021, 911, 911,
	911, 911, 72, 566, 565, 22, 1024, 1022, 1004, 2,
	1006, 19, 911, 18, 17, 16, 11, 0, 0, 0,
	0, 0, 0, 275, 998, 1035, 0, 0, 0, 0,
	0, 912, 912, 912, 912, 0, 0, 0, 276, 955,
	0, 0, 1016, 0, 0, 972, 0, 0, 698, 0,
	0, 1023, 0, 0, 0, 0, 0, 0, 0, 0,
	938, 0, 0, 0, 0, 0, 0, 0, 276, 0,
	0, 276, 72, 72, 72, 0, 1058, 1058, 1058, 1059,
	1060, 0, 0, 0, 72, 0, 0, 0, 1067, 0,
	0, 0, 0, 450, 0, 0, 276, 276, 276, 308,
	309, 458, 1045, 0, 0, 276, 0, 276, 276, 276,
	0, 0, 0, 1051, 1052, 1053, 0, 0, 0, 0,
	930, 0, 0, 0, 0, 0, 0, 0, 1062, 0,
	1064, 1065, 0, 0, 0, 997, 1034, 520, 484, 494,
	495, 487, 488, 489, 490, 491, 492, 493, 486, 0,
	0, 496, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 942, 943, 0, 944, 0, 0, 946, 0,
	948, 1049, 1050, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 421, 0, 0, 0,
	0, 276, 0, 567, 569, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 321, 0, 0, 0,
	0, 433, 0, 0, 0, 0, 438, 439, 440, 441,
	442, 443, 444, 0, 445, 446, 447, 448, 449, 434,
	435, 436, 437, 419, 420, 0, 398, 422, 0, 401,
	423, 424, 425, 426, 427, 428, 429, 430, 431, 432,
	0, 276, 0, 0, 0, 276, 0, 0, 0, 0,
	0, 0, 0, 0, 453, 454, 455, 0, 0, 0,
	480, 0, 483, 459, 0, 462, 463, 464, 497, 498,
	499, 500, 501, 502, 503, 0, 481, 482, 479, 485,
	484, 494, 495, 487, 488, 489, 490, 491, 492, 493,
	486, 0, 0, 496, 0, 0, 0, 0, 0, 0,
	691, 569, 0, 0, 0, 0, 691, 691, 0, 0,
	691, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 691, 691, 691, 691, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 691,
	0, 0, 567, 0, 0, 0, 0, 0, 0, 562,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 276, 0, 0, 0, 0, 0, 0, 634,
	0, 0, 0, 637, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	691, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 691, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	276, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 104, 0, 0, 0, 0, 567, 0, 569,
	0, 84, 0, 0, 0, 0, 0, 0, 89, 0,
	0, 0, 95, 0, 0, 110, 101, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 276, 71, 0, 0, 0, 0, 0, 0,
	0, 0, 79, 0, 0, 0, 0, 0, 0, 0,
	766, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	691, 0, 0, 0, 0, 0, 569, 691, 485, 484,
	494, 495, 487, 488, 489, 490, 491, 492, 493, 486,
	0, 0, 496, 0, 0, 0, 0, 0, 0, 276,
	0, 0, 0, 0, 0, 0, 0, 125, 0, 0,
	0, 0, 0, 106, 0, 0, 0, 0, 80, 0,
	109, 105, 120, 75, 118, 112, 99, 91, 92, 74,
	0, 108, 83, 88, 82, 103, 115, 116, 81, 130,
	78, 124, 77, 0, 123, 102, 0, 114, 119, 100,
	97, 76, 117, 98, 96, 93, 85, 0, 823, 0,
	111, 121, 131, 0, 0, 126, 127, 128, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 276, 976, 0, 0,
	73, 0, 94, 129, 107, 87, 122, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 86, 113, 0,
	869, 0, 0, 0, 90, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 276, 276, 276, 276, 0, 0, 0, 0,
	0, 0, 0, 1015, 0, 0, 276, 0, 0, 976,
	0, 0, 567, 232, 223, 194, 234, 171, 186, 243,
	187, 188, 215, 158, 202, 104, 184, 0, 174, 153,
	181, 154, 172, 196, 84, 199, 170, 225, 205, 292,
	0, 89, 0, 0, 240, 95, 209, 0, 110, 101,
	0, 0, 198, 227, 200, 222, 193, 216, 164, 208,
	235, 185, 213, 0, 0, 0, 71, 0, 0, 0,
	0, 0, 0, 0, 0, 79, 211, 230, 183, 212,
	214, 152, 210, 0, 156, 159, 242, 228, 177, 178,
	0, 0, 0, 0, 0, 0, 0, 197, 201, 219,
	191, 0, 0, 0, 0, 0, 0, 0, 0, 175,
	0, 207, 0, 0, 0, 162, 157, 195, 0, 0,
	0, 291, 0, 176, 220, 0, 0, 0, 293, 192,
	125, 229, 190, 189, 233, 236, 106, 0, 226, 173,
	182, 80, 180, 109, 105, 120, 75, 118, 112, 99,
	91, 92, 74, 0, 108, 83, 88, 82, 103, 115,
	116, 81, 130, 78, 124, 77, 288, 123, 102, 287,
	114, 119, 100, 97, 76, 117, 98, 96, 93, 85,
	0, 155, 0, 111, 121, 131, 169, 294, 126, 127,
	128, 0, 0, 0, 0, 0, 0, 290, 167, 168,
	165, 166, 203, 204, 237, 238, 239, 221, 163, 0,
	0, 224, 206, 73, 0, 94, 129, 107, 87, 122,
	0, 0, 0, 0, 179, 241, 218, 217, 231, 0,
	86, 113, 0, 0, 0, 0, 0, 282, 281, 289,
	232, 223, 194, 234, 171, 186, 243, 187, 188, 215,
	158, 202, 104, 184, 0, 174, 153, 181, 154, 172,
	196, 84, 199, 170, 225, 205, 141, 0, 89, 0,
	0, 240, 95, 209, 0, 110, 101, 0, 0, 198,
	227, 200, 222, 193, 216, 164, 208, 235, 185, 213,
	0, 0, 0, 149, 0, 0, 0, 0, 0, 0,
	0, 0, 79, 211, 230, 183, 212, 214, 152, 210,
	0, 156, 159, 242, 228, 177, 178, 0, 0, 0,
	0, 0, 0, 0, 197, 201, 219, 191, 0, 0,
	0, 0, 0, 0, 0, 0, 175, 0, 207, 0,
	0, 0, 162, 157, 195, 0, 0, 0, 143, 0,
	176, 220, 0, 0, 0, 148, 192, 125, 229, 190,
	189, 233, 236, 106, 0, 226, 173, 182, 80, 180,
	109, 105, 120, 75, 118, 112, 99, 91, 92, 74,
	0, 108, 83, 88, 82, 103, 115, 116, 81, 130,
	78, 124, 77, 160, 123, 102, 161, 114, 119, 100,
	97, 76, 117, 98, 96, 93, 85, 0, 155, 0,
	111, 121, 131, 169, 140, 126, 127, 128, 144, 145,
	0, 146, 0, 147, 142, 167, 168, 165, 166, 203,
	204, 237, 238, 239, 221, 163, 0, 0, 224, 206,
	73, 0, 94, 129, 107, 87, 122, 0, 0, 0,
	0, 179, 241, 218, 217, 231, 0, 86, 113, 0,
	0, 0, 0, 0, 90, 232, 223, 194, 234, 171,
	186, 243, 187, 188, 215, 158, 202, 104, 184, 0,
	174, 153, 181, 154, 172, 196, 84, 199, 170, 225,
	205, 292, 0, 89, 0, 0, 240, 95, 209, 0,
	110, 101, 0, 0, 198, 227, 200, 222, 193, 216,
	164, 208, 235, 185, 213, 0, 0, 0, 71, 0,
	0, 0, 0, 0, 0, 0, 0, 79, 211, 230,
	183, 212, 214, 152, 210, 0, 156, 159, 242, 228,
	177, 178, 0, 0, 0, 0, 0, 0, 0, 197,
	201, 219, 191, 0, 0, 0, 0, 0, 0, 0,
	0, 175, 0, 207, 0, 0, 0, 162, 157, 195,
	0, 0, 0, 291, 0, 176, 220, 0, 0, 0,
	293, 192, 125, 229, 190, 189, 233, 236, 106, 0,
	226, 173, 182, 80, 180, 109, 105, 120, 75, 118,
	112, 99, 91, 92, 74, 0, 108, 83, 88, 82,
	103, 115, 116, 81, 130, 78, 124, 77, 288, 123,
	102, 287, 114, 119, 100, 97, 76, 117, 98, 96,
	93, 85, 0, 155, 0, 111, 121, 131, 169, 294,
	126, 127, 128, 0, 0, 0, 0, 0, 0, 290,
	167, 168, 165, 166, 203, 204, 237, 238, 239, 221,
	163, 0, 0, 224, 206, 73, 0, 94, 129, 107,
	87, 122, 0, 0, 0, 0, 179, 241, 218, 217,
	231, 0, 86, 113, 0, 0, 0, 0, 0, 90,
	0, 289, 232, 223, 194, 234, 171, 186, 243, 187,
	188, 215, 158, 202, 104, 184, 0, 174, 153, 181,
	154, 172, 196, 84, 199, 170, 225, 205, 292, 0,
	89, 0, 0, 240, 95, 209, 0, 110, 101, 0,
	0, 198, 227, 200, 222, 193, 216, 164, 208, 235,
	185, 213, 0, 0, 0, 71, 0, 0, 0, 0,
	0, 0, 0, 0, 79, 211, 230, 183, 212, 214,
	152, 210, 0, 156, 159, 242, 228, 177, 178, 0,
	0, 0, 0, 0, 0, 0, 197, 201, 219, 191,
	0, 0, 0, 0, 0, 0, 994, 0, 175, 0,
	207, 0, 0, 0, 162, 157, 195, 0, 0, 0,
	291, 0, 176, 220, 0, 0, 0, 293, 192, 125,
	229, 190, 189, 233, 236, 106, 0, 226, 173, 182,
	80, 180, 109, 105, 120, 75, 118, 112, 99, 91,
	92, 74, 0, 108, 83, 88, 82, 103, 115, 116,
	81, 130, 78, 124, 77, 160, 123, 102, 161, 114,
	119, 100, 97, 76, 117, 98, 96, 93, 85, 0,
	155, 0, 111, 121, 131, 169, 294, 126, 127, 128,
	0, 0, 0, 0, 0, 0, 290, 167, 168, 165,
	166, 203, 204, 237, 238, 239, 221, 163, 0, 0,
	224, 206, 73, 0, 94, 129, 107, 87, 122, 0,
	0, 0, 0, 179, 241, 218, 217, 231, 0, 86,
	113, 0, 0, 0, 0, 0, 90, 232, 223, 194,
	234, 171, 186, 243, 187, 188, 215, 158, 202, 104,
	184, 0, 174, 153, 181, 154, 172, 196, 84, 199,
	170, 225, 205, 292, 0, 89, 0, 0, 240, 95,
	209, 0, 110, 101, 0, 0, 198, 227, 200, 222,
	193, 216, 164, 208, 235, 185, 213, 51, 0, 0,
	71, 0, 0, 0, 0, 0, 0, 0, 0, 79,
	211, 230, 183, 212, 214, 152, 210, 0, 156, 159,
	242, 228, 177, 178, 0, 0, 0, 0, 0, 0,
	0, 197, 201, 219, 191, 0, 0, 0, 0, 0,
	0, 0, 0, 175, 0, 207, 0, 0, 0, 162,
	157, 195, 0, 0, 0, 291, 0, 176, 220, 0,
	0, 0, 293, 192, 125, 229, 190, 189, 233, 236,
	106, 0, 226, 173, 182, 80, 180, 109, 105, 120,
	75, 118, 112, 99, 91, 92, 74, 0, 108, 83,
	88, 82, 103, 115, 116, 81, 130, 78, 124, 77,
	160, 123, 102, 161, 114, 119, 100, 97, 76, 117,
	98, 96, 93, 85, 0, 155, 0, 111, 121, 131,
	169, 294, 126, 127, 128, 0, 0, 0, 0, 0,
	0, 290, 167, 168, 165, 166, 203, 204, 237, 238,
	239, 221, 163, 0, 0, 224, 206, 73, 0, 94,
	129, 107, 87, 122, 0, 0, 0, 0, 179, 241,
	218, 217, 231, 0, 86, 113, 0, 0, 0, 0,
	0, 90, 232, 223, 194, 234, 171, 186, 243, 187,
	188, 215, 158, 202, 104, 184, 0, 174, 153, 181,
	154, 172, 196, 84, 199, 170, 225, 205, 292, 0,
	89, 0, 0, 240, 95, 209, 0, 110, 101, 0,
	0, 198, 227, 200, 222, 193, 216, 164, 208, 235,
	185, 213, 0, 0, 0, 384, 0, 0, 0, 0,
	0, 0, 0, 0, 79, 211, 230, 183, 212, 214,
	152, 210, 0, 156, 159, 242, 228, 177, 178, 0,
	0, 0, 0, 0, 0, 0, 197, 201, 219, 191,
	0, 0, 0, 0, 0, 0, 883, 0, 175, 0,
	207, 0, 0, 0, 162, 157, 195, 0, 0, 0,
	291, 0, 176, 220, 0, 0, 0, 293, 192, 125,
	229, 190, 189, 233, 236, 106, 0, 226, 173, 182,
	80, 180, 109, 105, 120, 75, 118, 112, 99, 91,
	92, 74, 0, 108, 83, 88, 82, 103, 115, 116,
	81, 130, 78, 124, 77, 160, 123, 102, 161, 114,
	119, 100, 97, 76, 117, 98, 96, 93, 85, 0,
	155, 0, 111, 121, 131, 169, 294, 126, 127, 128,
	0, 0, 0, 0, 0, 0, 290, 167, 168, 165,
	166, 203, 204, 237, 238, 239, 221, 163, 0, 0,
	224, 206, 73, 0, 94, 129, 107, 87, 122, 0,
	0, 0, 0, 179, 241, 218, 217, 231, 0, 86,
	113, 0, 0, 0, 0, 0, 90, 232, 223, 194,
	234, 171, 186, 243, 187, 188, 215, 158, 202, 104,
	184, 0, 174, 153, 181, 154, 172, 196, 84, 199,
	170, 225, 205, 292, 0, 89, 0, 0, 240, 95,
	209, 0, 110, 101, 0, 0, 198, 227, 200, 222,
	193, 216, 164, 208, 235, 185, 213, 0, 0, 0,
	71, 0, 0, 0, 0, 0, 0, 0, 0, 79,
	211, 230, 183, 212, 214, 152, 210, 0, 156, 159,
	242, 228, 177, 178, 0, 0, 0, 0, 0, 0,
	0, 197, 201, 219, 191, 0, 0, 0, 0, 0,
	0, 0, 0, 175, 0, 207, 0, 0, 0, 162,
	157, 195, 0, 0, 0, 291, 0, 176, 220, 0,
	0, 0, 293, 192, 125, 229, 190, 189, 233, 236,
	106, 0, 226, 173, 182, 80, 180, 109, 105, 120,
	75, 118, 112, 99, 91, 92, 74, 0, 108, 83,
	88, 82, 103, 115, 116, 81, 130, 78, 124, 77,
	160, 123, 102, 161, 114, 119, 100, 97, 76, 117,
	98, 96, 93, 85, 0, 155, 0, 111, 121, 131,
	169, 294, 126, 127, 128, 0, 0, 0, 0, 0,
	0, 290, 167, 168, 165, 166, 203, 204, 237, 238,
	239, 221, 163, 0, 0, 224, 206, 73, 0, 94,
	129, 107, 87, 122, 0, 0, 0, 0, 179, 241,
	218, 217, 231, 0, 86, 113, 0, 0, 0, 0,
	0, 90, 232, 223, 194, 234, 171, 186, 243, 187,
	188, 215, 158, 202, 104, 184, 0, 174, 153, 181,
	154, 172, 196, 84, 199, 170, 225, 205, 292, 0,
	89, 0, 0, 240, 95, 209, 0, 110, 101, 0,
	0, 198, 227, 200, 222, 193, 216, 164, 208, 235,
	185, 213, 0, 0, 0, 384, 0, 0, 0, 0,
	0, 0, 0, 0, 79, 211, 230, 183, 212, 214,
	152, 210, 0, 156, 159, 242, 228, 177, 178, 0,
	0, 0, 0, 0, 0, 0, 197, 201, 219, 191,
	0, 0, 0, 0, 0, 0, 0, 0, 175, 0,
	207, 0, 0, 0, 162, 157, 195, 0, 0, 0,
	291, 0, 176, 220, 0, 0, 0, 293, 192, 125,
	229, 190, 189, 233, 236, 106, 0, 226, 173, 182,
	80, 180, 109, 105, 120, 75, 118, 112, 99, 91,
	92, 74, 0, 108, 83, 88, 82, 103, 115, 116,
	81, 130, 78, 124, 77, 160, 123, 102, 161, 114,
	119, 100, 97, 76, 117, 98, 96, 93, 85, 0,
	155, 0, 111, 121, 131, 169, 294, 126, 127, 128,
	0, 0, 0, 0, 0, 0, 290, 167, 168, 165,
	166, 203, 204, 237, 238, 239, 221, 163, 0, 0,
	224, 206, 73, 0, 94, 129, 107, 87, 122, 0,
	0, 0, 0, 179, 241, 218, 217, 231, 0, 86,
	113, 0, 0, 0, 0, 0, 90, 232, 223, 194,
	234, 171, 186, 243, 187, 188, 215, 158, 202, 104,
	184, 0, 174, 153, 181, 154, 172, 196, 84, 199,
	170, 225, 205, 292, 0, 89, 0, 0, 240, 95,
	209, 0, 110, 101, 0, 0, 198, 227, 200, 222,
	193, 216, 164, 208, 235, 185, 213, 0, 0, 0,
	246, 0, 0, 0, 0, 0, 0, 0, 0, 79,
	211, 230, 183, 212, 214, 152, 210, 0, 156, 159,
	242, 228, 177, 178, 0, 0, 0, 0, 0, 0,
	0, 197, 201, 219, 191, 0, 0, 0, 0, 0,
	0, 0, 0, 175, 0, 207, 0, 0, 0, 162,
	157, 195, 0, 0, 0, 291, 0, 176, 220, 0,
	0, 0, 293, 192, 125, 229, 190, 189, 233, 236,
	106, 0, 226, 173, 182, 80, 180, 109, 105, 120,
	75, 118, 112, 99, 91, 92, 74, 0, 108, 83,
	88, 82, 103, 115, 116, 81, 130, 78, 124, 77,
	160, 123, 102, 161, 114, 119, 100, 97, 76, 117,
	98, 96, 93, 85, 0, 155, 0, 111, 121, 131,
	169, 294, 126, 127, 128, 0, 0, 0, 0, 0,
	0, 290, 167, 168, 165, 166, 203, 204, 237, 238,
	239, 221, 163, 0, 0, 224, 206, 73, 0, 94,
	129, 107, 87, 122, 0, 0, 0, 0, 179, 241,
	218, 217, 231, 104, 86, 113, 686, 0, 335, 0,
	0, 90, 84, 0, 334, 0, 0, 0, 0, 89,
	0, 0, 371, 95, 0, 0, 110, 101, 0, 0,
	0, 0, 364, 365, 0, 0, 0, 0, 0, 0,
	0, 51, 0, 0, 384, 352, 351, 353, 354, 355,
	356, 0, 0, 79, 357, 358, 359, 0, 0, 0,
	332, 345, 0, 370, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 342, 343, 689, 0, 0, 0, 382,
	0, 344, 0, 0, 341, 346, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 125, 0,
	0, 380, 0, 0, 106, 0, 0, 0, 0, 80,
	0, 109, 105, 120, 75, 118, 112, 99, 91, 92,
	74, 0, 108, 83, 88, 82, 103, 115, 116, 81,
	130, 78, 124, 77, 0, 123, 102, 0, 114, 119,
	100, 97, 76, 117, 98, 96, 93, 85, 0, 0,
	0, 111, 121, 131, 0, 0, 126, 127, 128, 0,
	0, 0, 0, 0, 0, 0, 372, 381, 378, 379,
	376, 377, 375, 374, 373, 383, 366, 367, 369, 0,
	368, 73, 0, 94, 129, 107, 87, 122, 0, 0,
	0, 104, 0, 0, 0, 0, 335, 0, 86, 113,
	84, 0, 334, 0, 0, 90, 0, 89, 0, 0,
	371, 95, 0, 0, 110, 101, 0, 0, 0, 0,
	364, 365, 0, 0, 0, 0, 0, 0, 0, 51,
	0, 0, 384, 352, 351, 353, 354, 355, 356, 0,
	0, 79, 357, 358, 359, 0, 0, 0, 332, 345,
	0, 370, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 342, 343, 689, 0, 0, 0, 382, 0, 344,
	0, 0, 341, 346, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 125, 0, 0, 380,
	0, 0, 106, 0, 0, 0, 0, 80, 0, 109,
	105, 120, 75, 118, 112, 99, 91, 92, 74, 0,
	108, 83, 88, 82, 103, 115, 116, 81, 130, 78,
	124, 77, 0, 123, 102, 0, 114, 119, 100, 97,
	76, 117, 98, 96, 93, 85, 0, 0, 0, 111,
	121, 131, 0, 0, 126, 127, 128, 0, 0, 0,
	0, 0, 0, 0, 372, 381, 378, 379, 376, 377,
	375, 374, 373, 383, 366, 367, 369, 0, 368, 73,
	0, 94, 129, 107, 87, 122, 0, 0, 0, 104,
	0, 0, 0, 0, 335, 0, 86, 113, 84, 0,
	334, 0, 0, 90, 0, 89, 0, 0, 371, 95,
	0, 0, 110, 101, 0, 0, 0, 0, 364, 365,
	0, 0, 0, 0, 0, 0, 0, 51, 0, 326,
	384, 352, 351, 353, 354, 355, 356, 0, 0, 79,
	357, 358, 359, 0, 0, 0, 332, 345, 0, 370,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 342,
	343, 0, 0, 0, 0, 382, 0, 344, 0, 0,
	341, 346, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 125, 0, 0, 380, 0, 0,
	106, 0, 0, 0, 0, 80, 0, 109, 105, 120,
	75, 118, 112, 99, 91, 92, 74, 0, 108, 83,
	88, 82, 103, 115, 116, 81, 130, 78, 124, 77,
	0, 123, 102, 0, 114, 119, 100, 97, 76, 117,
	98, 96, 93, 85, 0, 0, 0, 111, 121, 131,
	0, 0, 126, 127, 128, 0, 0, 0, 0, 0,
	0, 0, 372, 381, 378, 379, 376, 377, 375, 374,
	373, 383, 366, 367, 369, 0, 368, 73, 0, 94,
	129, 107, 87, 122, 0, 0, 23, 0, 0, 0,
	0, 0, 0, 0, 86, 113, 0, 104, 0, 0,
	0, 90, 335, 0, 0, 0, 84, 0, 334, 0,
	0, 0, 0, 89, 0, 0, 371, 95, 0, 0,
	110, 101, 0, 0, 0, 0, 364, 365, 0, 0,
	0, 0, 0, 0, 0, 51, 0, 0, 384, 352,
	351, 353, 354, 355, 356, 0, 0, 79, 357, 358,
	359, 0, 0, 0, 332, 345, 0, 370, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 342, 343, 0,
	0, 0, 0, 382, 0, 344, 0, 0, 341, 346,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 125, 0, 0, 380, 0, 0, 106, 0,
	0, 0, 0, 80, 0, 109, 105, 120, 75, 118,
	112, 99, 91, 92, 74, 0, 108, 83, 88, 82,
	103, 115, 116, 81, 130, 78, 124, 77, 0, 123,
	102, 0, 114, 119, 100, 97, 76, 117, 98, 96,
	93, 85, 0, 0, 0, 111, 121, 131, 0, 0,
	126, 127, 128, 0, 0, 0, 0, 0, 0, 0,
	372, 381, 378, 379, 376, 377, 375, 374, 373, 383,
	366, 367, 369, 0, 368, 73, 0, 94, 129, 107,
	87, 122, 0, 0, 0, 104, 0, 0, 0, 0,
	335, 0, 86, 113, 84, 0, 334, 0, 0, 90,
	0, 89, 0, 0, 371, 95, 0, 0, 110, 101,
	0, 0, 0, 0, 364, 365, 0, 0, 0, 0,
	0, 0, 0, 51, 0, 0, 384, 352, 351, 353,
	354, 355, 356, 0, 0, 79, 357, 358, 359, 0,
	0, 0, 332, 345, 0, 370, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 342, 343, 0, 0, 0,
	0, 382, 0, 344, 0, 0, 341, 346, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	125, 0, 0, 380, 0, 0, 106, 0, 0, 0,
	0, 80, 0, 109, 105, 120, 75, 118, 112, 99,
	91, 92, 74, 0, 108, 83, 88, 82, 103, 115,
	116, 81, 130, 78, 124, 77, 0, 123, 102, 0,
	114, 119, 100, 97, 76, 117, 98, 96, 93, 85,
	0, 0, 0, 111, 121, 131, 0, 0, 126, 127,
	128, 0, 0, 0, 0, 0, 0, 0, 372, 381,
	378, 379, 376, 377, 375, 374, 373, 383, 366, 367,
	369, 0, 368, 73, 0, 94, 129, 107, 87, 122,
	104, 0, 0, 0, 0, 0, 0, 0, 0, 84,
	86, 113, 0, 0, 0, 0, 89, 90, 0, 371,
	95, 0, 0, 110, 101, 0, 0, 0, 0, 364,
	365, 0, 0, 0, 0, 0, 0, 0, 51, 0,
	0, 384, 352, 351, 353, 354, 355, 356, 0, 0,
	79, 357, 358, 359, 0, 0, 0, 0, 345, 0,
	370, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	342, 343, 0, 0, 0, 0, 382, 0, 344, 0,
	0, 341, 346, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 125, 0, 0, 380, 0,
	0, 106, 0, 0, 0, 0, 80, 0, 109, 105,
	120, 75, 118, 112, 99, 91, 92, 74, 0, 108,
	83, 88, 82, 103, 115, 116, 81, 130, 78, 124,
	77, 0, 123, 102, 0, 114, 119, 100, 97, 76,
	117, 98, 96, 93, 85, 0, 0, 0, 111, 121,
	131, 0, 0, 126, 127, 128, 0, 0, 0, 0,
	0, 0, 0, 372, 381, 378, 379, 376, 377, 375,
	374, 373, 383, 366, 367, 369, 0, 368, 73, 0,
	94, 129, 107, 87, 122, 104, 0, 0, 0, 799,
	0, 0, 0, 0, 84, 86, 113, 0, 0, 0,
	0, 89, 90, 0, 0, 95, 0, 0, 110, 101,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 71, 0, 801, 0,
	0, 0, 0, 0, 0, 79, 0, 0, 0, 0,
	473, 472, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 474, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	125, 0, 0, 0, 0, 0, 106, 0, 0, 0,
	0, 80, 0, 109, 105, 120, 75, 118, 112, 99,
	91, 92, 74, 0, 108, 83, 88, 82, 103, 115,
	116, 81, 130, 78, 124, 77, 0, 123, 102, 0,
	114, 119, 100, 97, 76, 117, 98, 96, 93, 85,
	0, 0, 104, 111, 121, 131, 0, 0, 126, 127,
	128, 84, 0, 0, 0, 0, 0, 0, 89, 0,
	0, 0, 95, 0, 0, 110, 101, 0, 0, 0,
	0, 0, 0, 73, 0, 94, 129, 107, 87, 122,
	0, 0, 0, 71, 0, 0, 0, 0, 0, 0,
	86, 113, 79, 0, 0, 0, 0, 90, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 68, 0, 125, 0, 0,
	0, 69, 0, 106, 0, 0, 0, 0, 80, 0,
	109, 105, 120, 75, 118, 112, 99, 91, 92, 74,
	0, 108, 83, 88, 82, 103, 115, 116, 81, 130,
	78, 124, 77, 0, 123, 102, 0, 114, 119, 100,
	97, 76, 117, 98, 96, 93, 85, 0, 0, 0,
	111, 121, 131, 0, 0, 126, 127, 128, 0, 0,
	0, 23, 0, 0, 0, 0, 66, 0, 0, 0,
	0, 0, 104, 0, 0, 0, 0, 0, 0, 0,
	73, 84, 94, 129, 107, 87, 122, 0, 89, 0,
	0, 0, 95, 0, 0, 110, 101, 86, 113, 0,
	0, 0, 0, 0, 90, 0, 0, 0, 0, 0,
	51, 0, 0, 246, 0, 0, 0, 0, 0, 0,
	0, 0, 79, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 125, 0, 0,
	0, 0, 0, 106, 0, 0, 0, 0, 80, 0,
	109, 105, 120, 75, 118, 112, 99, 91, 92, 74,
	0, 108, 83, 88, 82, 103, 115, 116, 81, 130,
	78, 124, 77, 0, 123, 102, 0, 114, 119, 100,
	97, 76, 117, 98, 96, 93, 85, 0, 0, 104,
	111, 121, 131, 975, 0, 126, 127, 128, 84, 0,
	0, 0, 0, 0, 0, 89, 0, 0, 0, 95,
	0, 0, 110, 101, 0, 0, 0, 0, 0, 0,
	73, 0, 94, 129, 107, 87, 122, 0, 0, 0,
	246, 0, 977, 0, 0, 0, 0, 86, 113, 79,
	0, 0, 0, 0, 90, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 125, 0, 0, 0, 0, 0,
	106, 0, 0, 0, 0, 80, 0, 109, 105, 120,
	75, 118, 112, 99, 91, 92, 74, 0, 108, 83,
	88, 82, 103, 115, 116, 81, 130, 78, 124, 77,
	0, 123, 102, 0, 114, 119, 100, 97, 76, 117,
	98, 96, 93, 85, 0, 0, 0, 111, 121, 131,
	0, 0, 126, 127, 128, 0, 0, 0, 23, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 104,
	0, 0, 0, 0, 0, 0, 0, 73, 84, 94,
	129, 107, 87, 122, 0, 89, 0, 0, 0, 95,
	0, 0, 110, 101, 86, 113, 0, 0, 0, 0,
	0, 90, 0, 0, 0, 0, 0, 51, 0, 0,
	71, 0, 0, 0, 0, 0, 0, 0, 0, 79,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 125, 0, 0, 0, 0, 0,
	106, 0, 0, 0, 0, 80, 0, 109, 105, 120,
	75, 118, 112, 99, 91, 92, 74, 0, 108, 83,
	88, 82, 103, 115, 116, 81, 130, 78, 124, 77,
	0, 123, 102, 0, 114, 119, 100, 97, 76, 117,
	98, 96, 93, 85, 0, 0, 104, 111, 121, 131,
	0, 0, 126, 127, 128, 84, 0, 0, 0, 0,
	0, 0, 89, 0, 0, 0, 95, 0, 0, 110,
	101, 0, 0, 0, 0, 0, 0, 73, 0, 94,
	129, 107, 87, 122, 0, 0, 0, 71, 0, 0,
	553, 0, 0, 554, 86, 113, 79, 0, 0, 0,
	0, 90, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 125, 0, 0, 0, 0, 0, 106, 0, 0,
	0, 0, 80, 0, 109, 105, 120, 75, 118, 112,
	99, 91, 92, 74, 0, 108, 83, 88, 82, 103,
	115, 116, 81, 130, 78, 124, 77, 0, 123, 102,
	0, 114, 119, 100, 97, 76, 117, 98, 96, 93,
	85, 0, 0, 104, 111, 121, 131, 0, 0, 126,
	127, 128, 84, 0, 408, 0, 0, 0, 0, 89,
	0, 0, 0, 95, 0, 0, 110, 101, 0, 0,
	0, 0, 0, 0, 73, 0, 94, 129, 107, 87,
	122, 0, 0, 0, 71, 0, 407, 0, 0, 0,
	0, 86, 113, 79, 0, 0, 0, 0, 90, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 125, 0,
	0, 0, 0, 0, 106, 0, 0, 0, 0, 80,
	0, 109, 105, 120, 75, 118, 112, 99, 91, 92,
	74, 0, 108, 83, 88, 82, 103, 115, 116, 81,
	130, 78, 124, 77, 0, 123, 102, 0, 114, 119,
	100, 97, 76, 117, 98, 96, 93, 85, 0, 0,
	104, 111, 121, 131, 0, 0, 126, 127, 128, 84,
	0, 0, 0, 0, 0, 0, 89, 0, 0, 0,
	95, 0, 0, 110, 101, 0, 0, 0, 0, 0,
	0, 73, 0, 94, 129, 107, 87, 122, 0, 0,
	0, 246, 0, 977, 0, 0, 0, 0, 86, 113,
	79, 0, 0, 0, 0, 90, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 125, 0, 0, 0, 0,
	0, 106, 0, 0, 0, 0, 80, 0, 109, 105,
	120, 75, 118, 112, 99, 91, 92, 74, 0, 108,
	83, 88, 82, 103, 115, 116, 81, 130, 78, 124,
	77, 0, 123, 102, 0, 114, 119, 100, 97, 76,
	117, 98, 96, 93, 85, 0, 0, 104, 111, 121,
	131, 0, 0, 126, 127, 128, 84, 0, 0, 0,
	0, 0, 0, 89, 0, 0, 0, 95, 0, 0,
	110, 101, 0, 0, 0, 0, 0, 0, 73, 0,
	94, 129, 107, 87, 122, 51, 0, 0, 246, 0,
	0, 0, 0, 0, 0, 86, 113, 79, 0, 0,
	0, 0, 90, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 125, 0, 0, 0, 0, 0, 106, 0,
	0, 0, 0, 80, 0, 109, 105, 120, 75, 118,
	112, 99, 91, 92, 74, 0, 108, 83, 88, 82,
	103, 115, 116, 81, 130, 78, 124, 77, 0, 123,
	102, 0, 114, 119, 100, 97, 76, 117, 98, 96,
	93, 85, 0, 0, 104, 111, 121, 131, 0, 0,
	126, 127, 128, 84, 0, 0, 0, 0, 0, 0,
	89, 0, 0, 0, 95, 0, 0, 110, 101, 0,
	0, 0, 0, 0, 0, 73, 0, 94, 129, 107,
	87, 122, 0, 0, 0, 71, 0, 801, 0, 0,
	0, 0, 86, 113, 79, 0, 0, 0, 0, 90,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 125,
	0, 0, 0, 0, 0, 106, 0, 0, 0, 0,
	80, 0, 109, 105, 120, 75, 118, 112, 99, 91,
	92, 74, 0, 108, 83, 88, 82, 103, 115, 116,
	81, 130, 78, 124, 77, 0, 123, 102, 0, 114,
	119, 100, 97, 76, 117, 98, 96, 93, 85, 0,
	0, 0, 111, 121, 131, 104, 0, 126, 127, 128,
	0, 0, 0, 397, 84, 0, 0, 0, 0, 0,
	0, 89, 0, 0, 0, 95, 0, 0, 110, 101,
	0, 0, 73, 0, 94, 129, 107, 87, 122, 0,
	0, 0, 0, 0, 0, 0, 246, 0, 0, 86,
	113, 0, 0, 0, 0, 79, 90, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	125, 0, 0, 0, 0, 0, 106, 0, 0, 0,
	0, 80, 0, 109, 105, 120, 75, 118, 112, 99,
	91, 92, 74, 0, 108, 83, 88, 82, 103, 115,
	116, 81, 130, 78, 124, 77, 0, 123, 102, 0,
	114, 119, 100, 97, 76, 117, 98, 96, 93, 85,
	0, 0, 104, 111, 121, 131, 0, 0, 126, 127,
	128, 84, 0, 0, 0, 0, 0, 0, 89, 0,
	0, 0, 95, 0, 0, 110, 101, 0, 0, 0,
	0, 0, 0, 73, 0, 94, 129, 107, 87, 122,
	0, 0, 0, 71, 0, 0, 0, 0, 0, 0,
	86, 113, 79, 0, 0, 0, 0, 90, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 125, 0, 0,
	0, 0, 0, 106, 0, 0, 0, 0, 80, 0,
	109, 105, 120, 75, 118, 112, 99, 91, 92, 74,
	0, 108, 83, 88, 82, 103, 115, 116, 81, 130,
	78, 124, 77, 0, 123, 102, 0, 114, 119, 100,
	97, 76, 117, 98, 96, 93, 85, 0, 0, 104,
	111, 121, 131, 0, 0, 126, 127, 128, 84, 0,
	0, 0, 0, 0, 0, 89, 0, 0, 0, 95,
	0, 0, 110, 101, 0, 0, 0, 0, 0, 0,
	73, 0, 94, 129, 107, 87, 122, 0, 0, 0,
	384, 0, 0, 0, 0, 0, 0, 86, 113, 79,
	0, 0, 0, 0, 90, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 125, 0, 0, 0, 0, 0,
	106, 0, 0, 0, 0, 80, 0, 109, 105, 120,
	75, 118, 112, 99, 91, 92, 74, 0, 108, 83,
	88, 82, 103, 115, 116, 81, 130, 78, 124, 77,
	0, 123, 102, 0, 114, 119, 100, 97, 76, 117,
	98, 96, 93, 85, 0, 0, 104, 111, 121, 131,
	0, 0, 126, 127, 128, 84, 0, 0, 0, 0,
	0, 0, 89, 0, 0, 0, 95, 0, 0, 110,
	101, 0, 0, 0, 0, 0, 0, 73, 0, 94,
	129, 107, 87, 122, 0, 0, 0, 246, 0, 0,
	0, 0, 0, 0, 86, 113, 79, 0, 0, 0,
	0, 90, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 125, 0, 0, 0, 0, 0, 106, 0, 0,
	0, 0, 80, 0, 109, 105, 120, 75, 118, 112,
	99, 91, 92, 74, 0, 108, 83, 88, 82, 103,
	115, 116, 81, 130, 78, 124, 77, 0, 123, 102,
	0, 114, 119, 100, 97, 76, 117, 98, 96, 93,
	85, 0, 0, 0, 111, 121, 131, 0, 0, 126,
	127, 128, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 73, 0, 94, 129, 107, 87,
	122, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 86, 113, 0, 0, 0, 0, 0, 90,
}
var yyPact = [...]int{

	71, -1000, -178, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 707, 736, -1000, -1000, -1000, -1000, -1000, 504, 5105,
	17, -10, 58, 57, 1975, 55, 7039, -1000, -1000, 8,
	-1000, -168, -1000, -1000, -1000, -1000, -1000, -1000, 579, -1000,
	-1000, -1000, -1000, -1000, 687, 705, 583, 682, 584, -1000,
	17, 7039, 723, 1748, -149, 351, 15, 52, 15, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 54, -1000, 11, 425, 11, 7039, 7039, -1000,
	721, -73, 720, -26, -1000, -1000, -83, -1000, -96, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 7039, -1000, -1000, -1000, -1000, -1000,
	-1000, 278, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	329, 652, 4558, 4558, 707, -1000, 579, -1000, -1000, -1000,
	640, -1000, -1000, 236, 6568, 654, 94, 7039, 462, 2200,
	-1000, -1000, -1000, 187, 5936, -1000, -1000, -1000, 651, -1000,
	-1000, -1000, -1000, -1000, -1000, 690, 423, -1000, 1058, 7039,
	217, 419, 7039, 7039, 7039, 675, 530, 7039, -1000, -1000,
	-1000, 7039, 717, 7039, 7039, 7039, -1000, -1000, 719, -1000,
	717, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 729, 117,
	428, -1000, 4558, 1176, 479, 479, -1000, -1000, 68, -1000,
	-1000, 4753, 4753, 4753, 4753, 4753, 4753, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	479, 89, -1000, 4360, 479, 479, 479, 479, 479, 479,
	4558, 479, 479, 479, 479, 479, 479, 479, 479, 479,
	479, 479, 479, 479, -1000, -1000, 465, -1000, 300, 687,
	329, 584, 5779, 550, -1000, -1000, 546, 7039, -1000, 6882,
	3552, 714, 2200, 462, 4558, 82, -1000, -1000, -1000, -1000,
	-153, -162, 134, 161, -64, -1000, -1000, 490, -1000, 490,
	490, 490, 490, -40, -40, -40, -40, -1000, -1000, -1000,
	-1000, -1000, 518, -1000, 490, 490, 490, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 510, 510, 510, 498, 498,
	-1000, 674, 527, -1000, 79, -1000, -1000, 7039, -1000, -1000,
	714, 7039, -1000, -1000, -1000, 687, -91, -1000, -1000, -1000,
	-1000, 603, 4558, 4558, 258, 4558, 4558, 132, 4753, 266,
	191, 4753, 4753, 4753, 4753, 4753, 4753, 4753, 4753, 4753,
	4753, 4753, 4753, 4753, 4753, 4753, 260, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 418, -1000, 579, 434, 434,
	98, 98, 98, 98, 98, 1485, 3756, 3327, 329, 417,
	204, 4360, 3954, 3954, 4558, 4558, 3954, 679, 146, 204,
	6725, -1000, 329, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	3954, 3954, 3954, 3954, 4558, -1000, -1000, -1000, 652, -1000,
	679, 708, -1000, 631, 630, 3954, -1000, 526, 6882, 479,
	-1000, 5622, -1000, 476, -1000, 183, -1000, 81, -1000, -1000,
	-1000, 707, 4558, -1000, 204, -1000, 414, 479, -1000, -58,
	154, -1000, -1000, 506, 666, 142, 413, 137, -1000, -1000,
	656, -1000, 226, -69, -1000, -1000, 277, -40, -40, -1000,
	-1000, 82, 648, 82, 82, 82, 322, -1000, -1000, -1000,
	-1000, 275, -1000, -1000, -1000, 269, -1000, -1000, 7039, -1000,
	145, 148, 22, 6, -1, -5, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 320, -1000, 601, 132, 155, -1000, -1000, 265,
	-1000, -1000, 204, 204, 264, -1000, -1000, -1000, -1000, 266,
	4753, 4753, 4753, 249, 264, 800, 612, 1024, 98, 147,
	147, 106, 106, 106, 106, 106, 426, 426, -1000, -1000,
	-1000, 329, -1000, -1000, -1000, 329, 3954, 459, -1000, -1000,
	4948, 80, 479, 77, -1000, -1000, 4558, -1000, 329, 355,
	355, 184, 199, 355, 3954, 229, -1000, 4558, 329, -1000,
	355, 329, 355, 355, -1000, -1000, 7039, -1000, -1000, -1000,
	-1000, 502, -1000, 668, 432, 455, -1000, -1000, 4152, 329,
	403, 73, 707, 6882, 4558, 3327, 687, 204, -1000, 393,
	653, 143, 390, 6725, -1000, 386, -1000, -1000, 365, 522,
	37, -1000, -1000, -1000, 424, 82, 82, -1000, 153, -1000,
	-1000, -1000, 399, -1000, 458, 397, 2652, -1000, 7039, -1000,
	-1000, -1000, -1000, -1000, 357, -41, 504, 356, 351, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 249, 264, 768,
	-1000, 4753, 4753, -1000, -1000, 355, 3954, -1000, -1000, 6407,
	-1000, -1000, 2877, 3954, 3102, 204, -1000, -1000, -1000, 63,
	260, 63, -117, 447, 193, -1000, 4558, 302, -1000, -1000,
	-1000, -1000, -1000, -1000, 714, 6250, 665, -1000, 479, -1000,
	-1000, 573, 6725, 6725, 687, -1000, 204, -1000, -1000, 329,
	-164, -45, 256, -1000, 343, -1000, 490, -1000, -1000, -60,
	727, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 316, 252, -1000, 245, -1000, -1000, -1000, -1000,
	-1000, -1000, 643, -1000, -1000, -1000, -1000, 4753, 264, 264,
	-1000, -1000, -1000, -1000, 72, 329, -1000, 329, 490, 490,
	-1000, 490, 498, -1000, 490, -22, 490, -23, 329, 329,
	479, -114, -1000, 204, 4558, 712, 457, 552, -1000, -1000,
	-1000, 677, 5285, 5442, 726, -1000, 479, -1000, 579, 66,
	-1000, -1000, 2652, -1000, -1000, -1000, 140, -1000, -135, 6725,
	-1000, 115, -1000, -99, -1000, 400, 339, 334, 264, 2427,
	-1000, -1000, -1000, 61, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 4753, 329, 310, 204, 709, 689, 6250, 6250,
	6250, 6250, -1000, 577, 572, -1000, 571, 569, 618, 7039,
	-1000, 338, 5285, 91, -1000, 6093, -1000, -1000, 6882, 455,
	329, 6725, -1000, 332, 635, -1000, 230, 659, -1000, 658,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 56, -1000, -1000,
	-1000, 4558, 4558, 552, 494, 493, -1000, -1000, -1000, -1000,
	563, -1000, 562, -1000, -1000, -1000, -1000, -1000, 49, 47,
	26, -1000, 454, -1000, -1000, -1000, 633, -1000, 294, -1000,
	-1000, 329, 36, -138, 204, 436, 4558, 4558, -1000, -1000,
	479, 479, 479, -1000, -1000, -1000, 594, -131, -143, 204,
	204, 6725, 6725, 6725, -1000, 582, -1000, 328, -1000, 328,
	328, -136, -1000, 6725, -1000, -1000, -139, -1000, -144, -1000,
}
var yyPgo = [...]int{

	0, 996, 995, 994, 993, 991, 989, 55, 536, 985,
	967, 963, 958, 957, 952, 951, 948, 946, 945, 943,
	942, 937, 929, 926, 57, 925, 924, 922, 44, 921,
	51, 920, 919, 918, 25, 81, 26, 23, 114, 917,
	21, 7, 28, 916, 915, 3, 910, 941, 909, 48,
	908, 905, 6, 14, 892, 891, 889, 888, 46, 162,
	886, 885, 883, 882, 880, 879, 40, 2, 18, 11,
	15, 877, 19, 5, 876, 36, 874, 860, 859, 858,
	22, 857, 41, 855, 16, 43, 854, 33, 8, 32,
	49, 47, 853, 852, 850, 341, 821, 122, 310, 818,
	817, 816, 814, 39, 0, 4, 24, 31, 812, 773,
	45, 1, 806, 803, 86, 10, 17, 802, 20, 801,
	799, 798, 797, 796, 795, 794, 253, 793, 792, 790,
	12, 27, 789, 788, 787, 785, 782, 778, 42, 13,
	777, 776, 774, 772, 29, 770, 75, 38, 765, 757,
	756, 9, 752, 747, 746, 52, 50, 743, 90,
}
var yyR1 = [...]int{

	0, 153, 154, 154, 6, 6, 6, 6, 6, 6,
	6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
	6, 6, 7, 7, 7, 8, 9, 9, 10, 10,
	11, 11, 27, 27, 12, 13, 14, 14, 117, 117,
	15, 15, 15, 15, 18, 147, 149, 133, 133, 132,
	132, 134, 134, 135, 135, 135, 148, 148, 148, 144,
	120, 120, 120, 123, 123, 121, 121, 121, 121, 121,
	121, 121, 122, 122, 122, 122, 122, 124, 124, 124,
	124, 124, 125, 125, 125, 125, 125, 125, 125, 125,
	125, 125, 125, 125, 125, 125, 143, 143, 126, 126,
	138, 138, 139, 139, 139, 136, 136, 137, 137, 140,
	140, 140, 127, 127, 127, 127, 127, 127, 128, 128,
	141, 141, 130, 130, 130, 131, 131, 142, 142, 142,
	142, 142, 129, 129, 145, 145, 150, 150, 150, 150,
	150, 146, 146, 152, 152, 151, 16, 16, 16, 16,
	16, 16, 16, 16, 17, 17, 17, 1, 19, 2,
	3, 4, 4, 5, 5, 5, 5, 119, 119, 119,
	20, 20, 20, 20, 20, 20, 20, 20, 20, 20,
	20, 33, 33, 49, 49, 23, 21, 22, 22, 22,
	22, 157, 24, 25, 25, 26, 26, 26, 30, 30,
	30, 28, 28, 29, 29, 36, 36, 35, 35, 37,
	37, 37, 37, 108, 108, 108, 107, 107, 39, 39,
	40, 40, 41, 41, 42, 42, 42, 50, 43, 43,
	43, 43, 113, 113, 112, 112, 112, 111, 111, 44,
	44, 44, 44, 45, 45, 45, 45, 46, 46, 48,
	48, 47, 47, 51, 51, 51, 51, 52, 52, 53,
	53, 38, 38, 38, 38, 38, 38, 38, 96, 96,
	55, 55, 54, 54, 54, 54, 54, 54, 54, 54,
	54, 54, 65, 65, 65, 65, 65, 65, 56, 56,
	56, 56, 56, 56, 56, 34, 34, 66, 66, 66,
	72, 67, 67, 59, 59, 59, 59, 59, 59, 59,
	59, 59, 59, 59, 59, 59, 59, 59, 59, 59,
	59, 59, 59, 59, 59, 59, 59, 59, 59, 59,
	59, 59, 59, 63, 63, 63, 61, 61, 61, 61,
	61, 61, 61, 61, 61, 62, 62, 62, 62, 62,
	62, 62, 62, 158, 158, 64, 64, 64, 64, 31,
	31, 31, 31, 31, 116, 116, 118, 118, 118, 118,
	118, 118, 118, 118, 118, 118, 118, 118, 118, 76,
	76, 32, 32, 74, 74, 75, 77, 77, 73, 73,
	73, 58, 58, 58, 58, 58, 58, 58, 60, 60,
	60, 78, 78, 79, 79, 80, 80, 81, 81, 82,
	83, 83, 83, 84, 84, 84, 84, 85, 85, 85,
	57, 57, 57, 57, 57, 57, 86, 86, 86, 86,
	87, 87, 68, 68, 70, 70, 69, 71, 88, 88,
	89, 90, 90, 91, 91, 93, 93, 93, 92, 92,
	92, 94, 94, 97, 97, 98, 98, 95, 95, 99,
	99, 99, 99, 99, 99, 99, 99, 99, 99, 100,
	100, 100, 101, 101, 102, 102, 102, 105, 105, 106,
	106, 109, 109, 110, 110, 103, 103, 103, 103, 103,
	103, 103, 103, 103, 103, 103, 103, 103, 103, 103,
	103, 103, 103, 103, 103, 103, 103, 103, 103, 103,
	103, 103, 103, 103, 103, 103, 103, 103, 103, 103,
	103, 103, 103, 103, 103, 103, 103, 103, 103, 103,
	103, 103, 103, 103, 103, 103, 103, 103, 103, 103,
	103, 103, 103, 103, 103, 103, 103, 103, 103, 103,
	103, 103, 103, 103, 103, 103, 103, 103, 103, 103,
	103, 103, 103, 103, 103, 103, 103, 103, 103, 103,
	103, 103, 103, 103, 103, 103, 103, 103, 103, 103,
	103, 103, 104, 104, 104, 104, 104, 104, 104, 104,
	104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
	104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
	104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
	104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
	104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
	104, 155, 156, 114, 115, 115, 115,
}
var yyR2 = [...]int{

	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 4, 6, 7, 10, 1, 3, 1, 3,
	6, 7, 1, 1, 8, 7, 3, 4, 1, 1,
	2, 9, 4, 7, 4, 4, 4, 0, 3, 0,
	4, 0, 3, 0, 1, 1, 1, 3, 3, 8,
	3, 1, 1, 2, 1, 1, 1, 1, 1, 1,
	1, 1, 2, 2, 2, 2, 2, 1, 2, 2,
	2, 1, 4, 4, 2, 2, 3, 3, 3, 3,
	1, 1, 1, 1, 1, 4, 1, 3, 0, 3,
	0, 5, 0, 3, 5, 0, 1, 0, 1, 0,
	1, 2, 0, 2, 2, 2, 2, 2, 0, 3,
	0, 1, 0, 3, 3, 0, 2, 0, 2, 1,
	2, 1, 0, 2, 4, 7, 2, 3, 2, 2,
	3, 1, 1, 1, 3, 2, 6, 7, 7, 7,
	9, 7, 7, 7, 4, 5, 4, 3, 3, 2,
	2, 3, 4, 2, 3, 2, 2, 1, 1, 1,
	3, 5, 6, 5, 5, 5, 3, 3, 6, 3,
	5, 0, 3, 0, 2, 4, 2, 2, 2, 2,
	2, 0, 2, 0, 2, 1, 2, 2, 0, 1,
	1, 0, 1, 0, 1, 0, 1, 1, 3, 1,
	2, 3, 5, 0, 1, 2, 1, 1, 0, 2,
	1, 3, 1, 1, 1, 3, 3, 3, 3, 5,
	5, 3, 0, 1, 0, 1, 2, 1, 1, 1,
	2, 2, 1, 2, 3, 2, 3, 2, 2, 2,
	1, 1, 3, 0, 5, 5, 5, 1, 3, 0,
	2, 1, 3, 3, 2, 3, 1, 2, 0, 3,
	1, 1, 3, 3, 4, 4, 5, 3, 4, 5,
	6, 2, 1, 2, 1, 2, 1, 2, 1, 1,
	1, 1, 1, 1, 1, 0, 2, 1, 1, 1,
	3, 1, 3, 1, 1, 1, 1, 1, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 2, 2, 2, 2, 2, 3, 1,
	1, 1, 1, 4, 5, 6, 4, 4, 6, 6,
	6, 9, 7, 5, 4, 2, 2, 2, 2, 2,
	2, 2, 2, 0, 2, 4, 4, 4, 4, 0,
	3, 4, 7, 3, 1, 1, 2, 3, 3, 1,
	2, 2, 1, 2, 1, 2, 2, 1, 2, 0,
	1, 0, 2, 1, 2, 4, 0, 2, 1, 3,
	5, 1, 1, 1, 1, 1, 1, 1, 1, 2,
	2, 0, 3, 0, 2, 0, 3, 1, 3, 2,
	0, 1, 1, 0, 2, 4, 4, 0, 2, 4,
	2, 1, 3, 5, 4, 6, 1, 3, 3, 5,
	0, 5, 1, 3, 1, 2, 3, 1, 1, 3,
	3, 1, 3, 3, 3, 1, 2, 1, 1, 1,
	1, 1, 1, 0, 2, 0, 3, 0, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 0,
	1, 1, 1, 1, 0, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 0, 0, 1, 1,
}
var yyChk = [...]int{

	-1000, -153, -6, -7, -11, -12, -13, -14, -15, -16,
	-17, -1, -19, -20, -23, -21, -2, -3, -4, -5,
	-22, -8, -9, 6, -27, 8, 9, 29, -18, 113,
	114, 115, 137, 117, 130, 32, 52, 215, 132, 221,
	224, 225, 228, 227, 24, 131, 135, 136, -155, 7,
	199, 55, -154, 232, -80, 14, -26, 5, -24, -157,
	-24, -24, -24, -24, -147, 55, 191, -102, 120, 126,
	-105, 58, -104, 205, 144, 138, 166, 157, 155, 67,
	133, 153, 149, 147, 26, 171, 222, 210, 148, 33,
	229, 142, 143, 170, 207, 37, 169, 165, 168, 141,
	164, 41, 160, 150, 17, 136, 128, 209, 146, 135,
	40, 175, 140, 223, 162, 151, 152, 167, 139, 163,
	137, 176, 211, 159, 156, 122, 180, 181, 182, 208,
	154, 177, -95, 124, 120, 121, 191, 120, 120, -119,
	179, 31, 189, 113, 183, 184, 186, 188, 120, 58,
	-103, -104, 73, 21, 23, 173, 76, 108, 15, 77,
	158, 161, 107, 200, 50, 192, 193, 190, 191, 178,
	28, 9, 24, 131, 20, 101, 115, 80, 81, 216,
	134, 22, 132, 70, 18, 53, 10, 12, 13, 125,
	124, 92, 121, 48, 7, 109, 25, 89, 44, 27,
	46, 90, 16, 194, 195, 30, 204, 103, 51, 38,
	74, 68, 71, 54, 72, 14, 49, 219, 218, 91,
	116, 199, 47, 6, 203, 29, 130, 45, 79, 123,
	69, 220, 5, 126, 8, 52, 127, 196, 197, 198,
	36, 217, 78, 11, 120, -109, 58, -104, -114, -114,
	61, 209, -114, 226, -114, -114, -114, -114, -114, -114,
	-7, -84, 16, 15, -10, -8, -155, 6, 19, 20,
	-30, 42, 43, -25, -95, -47, -109, 10, -90, -117,
	-91, 230, 229, -106, -93, -105, -103, 161, 158, 231,
	189, 113, 31, 120, 179, 212, -148, -144, 58, -98,
	125, 121, -98, 120, -97, 125, 58, -97, -47, -47,
	-114, 10, 179, 10, 120, 191, -114, -114, 185, -114,
	188, -47, -114, 61, -114, -156, 57, -85, 18, 30,
	-38, -54, 74, -59, 28, 22, -58, -55, -73, -71,
	-72, 108, 97, 98, 105, 75, 109, -63, -61, -62,
	-64, 60, 59, 61, 62, 63, 64, 68, 69, 70,
	-105, -109, -69, -155, 46, 47, 200, 201, 204, 202,
	77, 36, 190, 198, 197, 196, 194, 195, 192, 193,
	125, 191, 103, 199, 58, -104, -81, -82, -38, -80,
	-7, -24, 38, -28, 20, 66, -48, 25, -47, 29,
	110, -47, 56, -90, 82, -92, -105, 60, 28, 29,
	15, 57, 56, -120, -123, -125, -124, -121, -122, 155,
	156, 108, 159, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 133, 151, 152, 153, 154, 138, 139,
	140, 141, 142, 143, 144, 146, 147, 148, 149, 150,
	-109, 74, 58, -47, -47, -47, 22, 54, -109, -47,
	-49, 10, -47, -47, -47, -33, 10, -49, -114, -114,
	8, 92, 73, 72, 89, 56, 17, -38, -56, 92,
	74, 90, 91, 76, 94, 93, 104, 97, 98, 99,
	100, 101, 102, 103, 95, 96, 107, 82, 83, 84,
	85, 86, 87, 88, -96, -155, -72, -155, 111, 112,
	-59, -59, -59, -59, -59, -59, -155, 110, -7, -67,
	-38, -155, -155, -155, -155, -155, -155, -155, -76, -38,
	-155, -158, -155, -158, -158, -158, -158, -158, -158, -158,
	-155, -155, -155, -155, 56, -83, 23, 24, -84, -156,
	-30, -60, -105, 61, 64, -29, 45, -57, 29, 36,
	-7, -155, -47, -88, -89, -73, -105, -109, -110, -109,
	-103, -53, 11, -91, -38, -131, 107, 214, -149, -133,
	222, -144, -145, -150, 128, 126, -146, 33, 121, 27,
	-140, 68, 74, -136, 176, -126, 55, -126, -126, -126,
	-126, -130, 158, -130, -130, -130, 55, -126, -126, -126,
	-138, 55, -138, -138, -139, 55, -139, 22, 54, -99,
	116, 222, 200, 118, 115, 119, 114, 173, 158, 67,
	28, 14, 211, 58, -47, -114, -53, -47, -114, -114,
	-114, -84, 187, -114, 40, -38, -38, -65, 68, 74,
	69, 70, -38, -38, -59, -66, -69, -72, 65, 92,
	90, 91, 76, -59, -59, -59, -59, -59, -59, -59,
	-59, -59, -59, -59, -59, -59, -59, -59, -116, 58,
	60, 58, -58, -58, -105, -36, 20, -35, -37, 99,
	-38, -109, -106, -110, -103, -156, 56, -156, -7, -35,
	-35, -38, -38, -35, -28, -74, -75, 78, -105, -156,
	-35, -36, -35, -35, -82, -85, -94, 18, 10, 36,
	36, -35, -87, 54, -88, -68, -70, -69, -155, -7,
	-86, -105, -53, 56, 82, 110, -80, -38, 58, -155,
	-134, 173, 82, 55, 27, -146, 58, 58, -146, -127,
	28, 68, -137, 177, 61, -130, -130, -131, 29, -131,
	-131, -131, -143, 60, 61, 61, -47, -114, -100, -101,
	123, 21, 121, 27, 82, 123, 129, 129, 129, -114,
	-114, 60, 41, 68, 69, 70, -66, -59, -59, -59,
	-34, 134, 73, -156, -156, -35, 56, -108, -107, 21,
	-105, 60, 110, -155, 110, -38, -156, -156, -156, 56,
	127, 21, -156, -35, -77, -75, 80, -38, -156, -156,
	-156, -156, -156, -47, -39, 10, 26, -87, 56, -156,
	-156, -156, 56, 110, -80, -89, -38, -106, -84, 58,
	-132, 28, 82, 58, -152, -151, -105, 58, 58, -128,
	54, 60, 61, 62, 68, 190, 57, -131, -131, 58,
	108, 57, 56, 56, 57, 56, -115, -155, -106, -47,
	-114, 58, 158, -147, 58, -144, -34, 73, -59, -59,
	-156, -37, -107, 99, -110, -36, -106, -118, 108, 155,
	133, 153, 149, 170, 160, 175, 151, 176, -116, -118,
	205, -80, 81, -38, 79, -53, -40, -41, -42, -43,
	-50, -72, -155, -47, 27, -70, 36, -7, -155, -105,
	-105, -84, -156, -135, 229, 223, 161, 61, 57, 56,
	-126, -141, 173, 8, 60, 61, 61, 29, -59, 110,
	-156, -156, -126, -126, -126, -139, -126, 143, -126, 143,
	-156, -156, -155, -32, 203, -38, -78, 12, 56, -44,
	-45, -46, 44, 48, 50, 45, 46, 47, 51, -113,
	21, -40, -155, -112, -111, 21, -109, 60, 8, -68,
	-7, 110, -115, 82, 208, -151, -142, 128, 27, 126,
	190, 57, 57, 58, 99, -130, 58, -59, -156, 60,
	-79, 13, 15, -41, -42, -41, -42, 44, 44, 44,
	49, 44, 49, 44, -45, -109, -156, -51, 52, 124,
	53, -111, -88, -156, -105, 58, 34, -129, 67, 27,
	27, -31, 92, 208, -38, -67, 54, 54, 44, 44,
	121, 121, 121, 35, 60, -156, 206, 51, 209, -38,
	-38, -155, -155, -155, 41, 207, 210, -52, -105, -52,
	-52, 41, -156, 56, -156, -156, 208, -105, 209, 210,
}
var yyDef = [...]int{

	0, -2, 2, -2, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
	21, 405, 0, 191, 191, 191, 191, 191, 0, 474,
	457, 0, 0, 0, 0, 0, 0, 643, 643, 0,
	643, 0, 643, 643, 643, 643, 643, 643, 0, 32,
	33, 641, 1, 3, 413, 0, 0, 195, 198, 193,
	457, 0, 0, 0, 40, 0, 455, 0, 455, 475,
	476, 477, 478, 582, 583, 584, 585, 586, 587, 588,
	589, 590, 591, 592, 593, 594, 595, 596, 597, 598,
	599, 600, 601, 602, 603, 604, 605, 606, 607, 608,
	609, 610, 611, 612, 613, 614, 615, 616, 617, 618,
	619, 620, 621, 622, 623, 624, 625, 626, 627, 628,
	629, 630, 631, 632, 633, 634, 635, 636, 637, 638,
	639, 640, 0, 458, 453, 0, 453, 0, 0, 643,
	565, 522, 496, 498, 643, 643, 0, 643, 564, 167,
	168, 169, 485, 486, 487, 488, 489, 490, 491, 492,
	493, 494, 495, 497, 499, 500, 501, 502, 503, 504,
	505, 506, 507, 508, 509, 510, 511, 512, 513, 514,
	515, 516, 517, 518, 519, 520, 521, 523, 524, 525,
	526, 527, 528, 529, 530, 531, 532, 533, 534, 535,
	536, 537, 538, 539, 540, 541, 542, 543, 544, 545,
	546, 547, 548, 549, 550, 551, 552, 553, 554, 555,
	556, 557, 558, 559, 560, 561, 562, 563, 566, 567,
	568, 569, 570, 571, 572, 573, 574, 575, 576, 577,
	578, 579, 580, 581, 0, 186, 481, 482, 159, 160,
	643, 0, 163, 643, 165, 166, 187, 188, 189, 190,
	26, 417, 0, 0, 405, 28, 0, 191, 196, 197,
	201, 199, 200, 192, 0, 0, 251, 0, 36, 0,
	441, 38, -2, 0, 0, 479, 480, -2, 493, 447,
	496, 498, 522, 564, 565, 0, 0, 56, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 157, 158,
	170, 0, 183, 0, 0, 0, 176, 177, 181, 179,
	183, 643, 161, 643, 164, 27, 642, 22, 0, 0,
	414, 261, 0, 266, 268, 0, 303, 304, 305, 306,
	307, 0, 0, 0, 0, 0, 0, 329, 330, 331,
	332, 391, 392, 393, 394, 395, 396, 397, 270, 271,
	388, 0, 437, 0, 0, 0, 0, 0, 0, 0,
	379, 0, 353, 353, 353, 353, 353, 353, 353, 353,
	0, 0, 0, 0, -2, -2, 406, 407, 410, 413,
	26, 198, 0, 203, 202, 194, 0, 0, 250, 0,
	0, 259, 0, 37, 0, 125, 448, 449, 450, 446,
	0, 47, 0, 109, 105, 61, 62, 98, 64, 98,
	98, 98, 98, 122, 122, 122, 122, 90, 91, 92,
	93, 94, 0, 77, 98, 98, 98, 81, 65, 66,
	67, 68, 69, 70, 71, 100, 100, 100, 102, 102,
	42, 0, 0, 44, 0, 154, 454, 0, 156, 643,
	259, 0, 643, 643, 643, 413, 0, 643, 185, 162,
	418, 0, 0, 0, 0, 0, 0, 264, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 288, 289, 290,
	291, 292, 293, 294, 267, 0, 281, 0, 0, 0,
	323, 324, 325, 326, 327, 0, 205, 0, 26, 0,
	301, 0, 0, 0, 0, 0, 0, 201, 0, 380,
	0, 345, 0, 346, 347, 348, 349, 350, 351, 352,
	0, 205, 0, 0, 0, 409, 411, 412, 417, 29,
	201, 0, 398, 0, 0, 0, 204, 430, 0, 0,
	-2, 0, 249, 259, 438, 0, 388, 0, 252, 483,
	484, 405, 0, 442, 443, 444, 0, 0, 45, 51,
	0, 57, 58, 0, 0, 0, 0, 0, 141, 142,
	112, 110, 0, 107, 106, 63, 0, 122, 122, 84,
	85, 125, 0, 125, 125, 125, 0, 78, 79, 80,
	72, 0, 73, 74, 75, 0, 76, 456, 0, 643,
	469, 0, 466, 0, 464, 0, 459, 460, 461, 462,
	463, 465, 467, 468, 155, 171, 643, 184, 173, 174,
	175, 643, 0, 180, 0, 262, 263, 265, 282, 0,
	284, 286, 415, 416, 272, 273, 297, 298, 299, 0,
	0, 0, 0, 295, 277, 0, 308, 309, 310, 311,
	312, 313, 314, 315, 316, 317, 318, 319, 322, 364,
	365, 0, 320, 321, 328, 0, 0, 206, 207, 209,
	213, 0, 389, 0, -2, 300, 0, 436, 26, 0,
	0, 0, 0, 0, 0, 386, 383, 0, 0, 354,
	0, 0, 0, 0, 408, 23, 0, 451, 452, 399,
	400, 218, 30, 0, 430, 420, 432, 434, 0, 26,
	0, 426, 405, 0, 0, 0, 413, 260, 126, 0,
	49, 0, 0, 0, 136, 0, 138, 139, 0, 118,
	0, 111, 60, 108, 0, 125, 125, 86, 0, 87,
	88, 89, 0, 96, 0, 0, 644, 146, 0, 643,
	470, 471, 472, 473, 0, 0, 0, 0, 0, 172,
	178, 182, 419, 283, 285, 287, 274, 295, 278, 0,
	275, 0, 0, 269, 333, 0, 0, 210, 214, 0,
	216, 217, 0, 205, 0, 302, -2, 336, 337, 0,
	0, 0, 0, 405, 0, 384, 0, 0, 344, 355,
	356, 357, 358, 24, 259, 0, 0, 31, 0, 435,
	-2, 0, 0, 0, 413, 439, 440, 389, 35, 0,
	53, 0, 0, 48, 0, 143, 98, 137, 140, 120,
	0, 113, 114, 115, 116, 117, 99, 82, 83, 123,
	124, 95, 0, 0, 103, 0, 43, 645, 646, 147,
	148, 149, 0, 151, 152, 153, 276, 0, 296, 279,
	334, 208, 215, 211, 0, 0, 390, 0, 98, 98,
	369, 98, 102, 372, 98, 374, 98, 377, 0, 0,
	0, 381, 343, 387, 0, 401, 219, 220, 222, 223,
	224, 232, 0, 234, 0, 433, 0, -2, 0, 428,
	427, 34, 644, 46, 54, 55, 0, 52, 134, 0,
	145, 127, 121, 0, 97, 0, 0, 0, 280, 0,
	335, 338, 366, 122, 370, 371, 373, 375, 376, 378,
	340, 339, 0, 0, 0, 385, 403, 0, 0, 0,
	0, 0, 239, 0, 0, 242, 0, 0, 0, 0,
	233, 0, 0, 253, 235, 0, 237, 238, 0, 423,
	26, 0, 41, 0, 0, 144, 132, 0, 129, 131,
	119, 101, 104, 150, 212, 367, 368, 359, 342, 382,
	25, 0, 0, 221, 228, 0, 231, 240, 241, 243,
	0, 245, 0, 247, 248, 225, 226, 227, 0, 0,
	0, 236, 431, -2, 429, 50, 0, 59, 0, 128,
	130, 0, 0, 0, 404, 402, 0, 0, 244, 246,
	0, 0, 0, 135, 133, 341, 0, 0, 0, 229,
	230, 0, 0, 0, 360, 0, 363, 0, 257, 0,
	0, 361, 254, 0, 255, 256, 0, 258, 0, 362,
}
var yyTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 75, 3, 3, 3, 102, 94, 3,
	55, 57, 99, 97, 56, 98, 110, 100, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 232,
	83, 82, 84, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 104, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 93, 3, 105,
}
var yyTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 58, 59, 60, 61, 62, 63, 64,
	65, 66, 67, 68, 69, 70, 71, 72, 73, 74,
	76, 77, 78, 79, 80, 81, 85, 86, 87, 88,
	89, 90, 91, 92, 95, 96, 101, 103, 106, 107,
	108, 109, 111, 112, 113, 114, 115, 116, 117, 118,
	119, 120, 121, 122, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231,
}
var yyTok3 = [...]int{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:276
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:281
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:282
		{
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:286
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 22:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:309
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 23:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:317
		{
			yyVAL.selStmt = &Union{Type: yyDollar[2].str, Left: yyDollar[1].selStmt, Right: yyDollar[3].selStmt, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].str}
		}
	case 24:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:321
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, SelectExprs: SelectExprs{Nextval{Expr: yyDollar[5].expr}}, From: TableExprs{&AliasedTableExpr{Expr: yyDollar[7].tableName}}}
		}
	case 25:
		yyDollar = yyS[yypt-10 : yypt+1]
		//line sql.y:328
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, Distinct: yyDollar[4].str, Hints: yyDollar[5].str, SelectExprs: yyDollar[6].selectExprs, From: yyDollar[7].tableExprs, Where: NewWhere(WhereStr, yyDollar[8].expr), GroupBy: GroupBy(yyDollar[9].exprs), Having: NewWhere(HavingStr, yyDollar[10].expr)}
		}
	case 26:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:334
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 27:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:338
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 28:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:344
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 29:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:348
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 30:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:355
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[5].ins
			ins.Action = yyDollar[1].str
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].str
			ins.Table = yyDollar[4].tableName
			ins.OnDup = OnDup(yyDollar[6].updateExprs)
			yyVAL.statement = ins
		}
	case 31:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:366
		{
			cols := make(Columns, 0, len(yyDollar[6].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[7].updateExprs))
			for _, updateList := range yyDollar[6].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[7].updateExprs)}
		}
	case 32:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:378
		{
			yyVAL.str = InsertStr
		}
	case 33:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:382
		{
			yyVAL.str = ReplaceStr
		}
	case 34:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:388
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), Table: yyDollar[3].tableName, Exprs: yyDollar[5].updateExprs, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 35:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:394
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Table: yyDollar[4].tableName, Where: NewWhere(WhereStr, yyDollar[5].expr), OrderBy: yyDollar[6].orderBy, Limit: yyDollar[7].limit}
		}
	case 36:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:400
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setExprs}
		}
	case 37:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:404
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[4].setExprs}
		}
	case 38:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:410
		{
			yyVAL.str = SessionStr
		}
	case 39:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:414
		{
			yyVAL.str = GlobalStr
		}
	case 40:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:421
		{
			yyDollar[1].ddl.Action = CreateTableStr
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			yyVAL.statement = yyDollar[1].ddl
		}
	case 41:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line sql.y:427
		{
			yyDollar[1].ddl.Action = CreateTableStr
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			yyDollar[1].ddl.PartitionName = string(yyDollar[7].bytes)
			yyDollar[1].ddl.TableSpec.Options.Type = PartitionTableType
			yyVAL.statement = yyDollar[1].ddl
		}
	case 42:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:435
		{
			var ifnotexists bool
			if yyDollar[3].byt != 0 {
				ifnotexists = true
			}
			yyVAL.statement = &DDL{Action: CreateDBStr, IfNotExists: ifnotexists, Database: yyDollar[4].tableIdent}
		}
	case 43:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:443
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: CreateIndexStr, IndexName: string(yyDollar[4].bytes), Table: yyDollar[6].tableName, NewName: yyDollar[6].tableName}
		}
	case 44:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:450
		{
			var ifnotexists bool
			if yyDollar[3].byt != 0 {
				ifnotexists = true
			}
			yyVAL.ddl = &DDL{Action: CreateTableStr, IfNotExists: ifnotexists, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
			setDDL(yylex, yyVAL.ddl)
		}
	case 45:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:461
		{
			yyVAL.TableSpec = yyDollar[2].TableSpec
			yyVAL.TableSpec.Options = yyDollar[4].TableOptions
		}
	case 46:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:468
		{
			yyVAL.TableOptions.Engine = yyDollar[1].str
			yyVAL.TableOptions.Charset = yyDollar[3].str
			yyVAL.TableOptions.Type = yyDollar[4].str
		}
	case 47:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:475
		{
			yyVAL.str = ""
		}
	case 48:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:479
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 49:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:484
		{
			yyVAL.str = ""
		}
	case 50:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:488
		{
			yyVAL.str = string(yyDollar[4].bytes)
		}
	case 51:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:493
		{
			yyVAL.str = ""
		}
	case 52:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:497
		{
		}
	case 53:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:501
		{
			yyVAL.str = NormalTableType
		}
	case 54:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:505
		{
			yyVAL.str = GlobalTableType
		}
	case 55:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:509
		{
			yyVAL.str = SingleTableType
		}
	case 56:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:516
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.AddColumn(yyDollar[1].columnDefinition)
		}
	case 57:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:521
		{
			yyVAL.TableSpec.AddColumn(yyDollar[3].columnDefinition)
		}
	case 58:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:525
		{
			yyVAL.TableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 59:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:531
		{
			yyDollar[2].columnType.NotNull = yyDollar[3].boolVal
			yyDollar[2].columnType.Default = yyDollar[4].optVal
			yyDollar[2].columnType.OnUpdate = yyDollar[5].optVal
			yyDollar[2].columnType.Autoincrement = yyDollar[6].boolVal
			yyDollar[2].columnType.KeyOpt = yyDollar[7].colKeyOpt
			yyDollar[2].columnType.Comment = yyDollar[8].optVal
			yyVAL.columnDefinition = &ColumnDefinition{Name: NewColIdent(string(yyDollar[1].bytes)), Type: yyDollar[2].columnType}
		}
	case 60:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:542
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolVal
			yyVAL.columnType.Zerofill = yyDollar[3].boolVal
		}
	case 63:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:552
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Length = yyDollar[2].optVal
		}
	case 64:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:557
		{
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 65:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:563
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 66:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:567
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 67:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:571
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 68:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:575
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 69:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:579
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 70:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:583
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 71:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:587
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 72:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:593
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 73:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:599
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 74:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:605
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 75:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:611
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 76:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:617
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 77:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:625
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 78:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:629
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 79:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:633
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 80:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:637
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 81:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:641
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 82:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:647
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 83:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:651
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 84:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:655
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 85:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:659
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 86:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:663
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 87:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:667
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 88:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:671
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 89:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:675
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 90:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:679
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 91:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:683
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 92:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:687
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 93:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:691
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 94:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:695
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 95:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:699
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs}
		}
	case 96:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:705
		{
			yyVAL.strs = make([]string, 0, 4)
			yyVAL.strs = append(yyVAL.strs, "'"+string(yyDollar[1].bytes)+"'")
		}
	case 97:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:710
		{
			yyVAL.strs = append(yyDollar[1].strs, "'"+string(yyDollar[3].bytes)+"'")
		}
	case 98:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:715
		{
			yyVAL.optVal = nil
		}
	case 99:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:719
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 100:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:724
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 101:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:728
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 102:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:736
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 103:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:740
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
			}
		}
	case 104:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:746
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 105:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:754
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 106:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:758
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 107:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:763
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 108:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:767
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 109:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:773
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 110:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:777
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 111:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:781
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 112:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:786
		{
			yyVAL.optVal = nil
		}
	case 113:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:790
		{
			yyVAL.optVal = NewStrVal(yyDollar[2].bytes)
		}
	case 114:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:794
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 115:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:798
		{
			yyVAL.optVal = NewFloatVal(yyDollar[2].bytes)
		}
	case 116:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:802
		{
			yyVAL.optVal = NewValArg(yyDollar[2].bytes)
		}
	case 117:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:806
		{
			yyVAL.optVal = NewValArg(yyDollar[2].bytes)
		}
	case 118:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:811
		{
			yyVAL.optVal = nil
		}
	case 119:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:815
		{
			yyVAL.optVal = NewValArg(yyDollar[3].bytes)
		}
	case 120:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:820
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 121:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:824
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 122:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:829
		{
			yyVAL.str = ""
		}
	case 123:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:833
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 124:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:837
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 125:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:842
		{
			yyVAL.str = ""
		}
	case 126:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:846
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 127:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:851
		{
			yyVAL.colKeyOpt = ColKeyNone
		}
	case 128:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:855
		{
			yyVAL.colKeyOpt = ColKeyPrimary
		}
	case 129:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:859
		{
			yyVAL.colKeyOpt = ColKey
		}
	case 130:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:863
		{
			yyVAL.colKeyOpt = ColKeyUniqueKey
		}
	case 131:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:867
		{
			yyVAL.colKeyOpt = ColKeyUnique
		}
	case 132:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:872
		{
			yyVAL.optVal = nil
		}
	case 133:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:876
		{
			yyVAL.optVal = NewStrVal(yyDollar[2].bytes)
		}
	case 134:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:882
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns}
		}
	case 135:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:886
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns}
		}
	case 136:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:892
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent("PRIMARY"), Primary: true, Unique: true}
		}
	case 137:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:896
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Primary: false, Unique: true}
		}
	case 138:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:900
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(string(yyDollar[2].bytes)), Primary: false, Unique: true}
		}
	case 139:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:904
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(string(yyDollar[2].bytes)), Primary: false, Unique: false}
		}
	case 140:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:908
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Primary: false, Unique: false, Fulltext: true}
		}
	case 141:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:915
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 142:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:919
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 143:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:925
		{
			yyVAL.indexColumns = []*IndexColumn{yyDollar[1].indexColumn}
		}
	case 144:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:929
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 145:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:935
		{
			yyVAL.indexColumn = &IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].optVal}
		}
	case 146:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:941
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 147:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:945
		{
			// Change this to a rename statement
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[4].tableName, NewName: yyDollar[7].tableName}
		}
	case 148:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:950
		{
			// Rename an index can just be an alter
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 149:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:955
		{
			yyVAL.statement = &DDL{Action: AlterEngineStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName, Engine: string(yyDollar[7].bytes)}
		}
	case 150:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line sql.y:959
		{
			yyVAL.statement = &DDL{Action: AlterCharsetStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName, Charset: string(yyDollar[9].bytes)}
		}
	case 151:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:963
		{
			yyVAL.statement = &DDL{Action: AlterAddColumnStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName, TableSpec: yyDollar[7].TableSpec}
		}
	case 152:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:967
		{
			yyVAL.statement = &DDL{Action: AlterDropColumnStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName, DropColumnName: string(yyDollar[7].bytes)}
		}
	case 153:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:971
		{
			yyVAL.statement = &DDL{Action: AlterModifyColumnStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName, ModifyColumnDef: yyDollar[7].columnDefinition}
		}
	case 154:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:978
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropTableStr, Table: yyDollar[4].tableName, IfExists: exists}
		}
	case 155:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:986
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: DropIndexStr, IndexName: string(yyDollar[3].bytes), Table: yyDollar[5].tableName, NewName: yyDollar[5].tableName}
		}
	case 156:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:991
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropDBStr, Database: yyDollar[4].tableIdent, IfExists: exists}
		}
	case 157:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1001
		{
			yyVAL.statement = &DDL{Action: TruncateTableStr, Table: yyDollar[3].tableName, NewName: yyDollar[3].tableName}
		}
	case 158:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1007
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName, NewName: yyDollar[3].tableName}
		}
	case 159:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1013
		{
			yyVAL.statement = &Xa{}
		}
	case 160:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1019
		{
			yyVAL.statement = &Explain{}
		}
	case 161:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1025
		{
			yyVAL.statement = &Kill{QueryID: &NumVal{raw: string(yyDollar[2].bytes)}}
		}
	case 162:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1029
		{
			yyVAL.statement = &Kill{QueryID: &NumVal{raw: string(yyDollar[3].bytes)}}
		}
	case 163:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1035
		{
			yyVAL.statement = &Transaction{Action: BeginTxnStr}
		}
	case 164:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1039
		{
			yyVAL.statement = &Transaction{Action: StartTxnStr}
		}
	case 165:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1043
		{
			yyVAL.statement = &Transaction{Action: RollbackTxnStr}
		}
	case 166:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1047
		{
			yyVAL.statement = &Transaction{Action: CommitTxnStr}
		}
	case 167:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1053
		{
			yyVAL.str = ShowUnsupportedStr
		}
	case 168:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1057
		{
			switch v := string(yyDollar[1].bytes); v {
			case ShowDatabasesStr, ShowTablesStr, ShowEnginesStr, ShowVersionsStr, ShowProcesslistStr, ShowQueryzStr, ShowTxnzStr, ShowColumnsStr:
				yyVAL.str = v
			default:
				yyVAL.str = ShowUnsupportedStr
			}
		}
	case 169:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1066
		{
			yyVAL.str = ShowUnsupportedStr
		}
	case 170:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1072
		{
			yyVAL.statement = &Show{Type: yyDollar[2].str}
		}
	case 171:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1076
		{
			yyVAL.statement = &Show{Type: ShowTablesStr, Database: yyDollar[4].tableName}
		}
	case 172:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1080
		{
			yyVAL.statement = &Show{Type: ShowFullTablesStr, Database: yyDollar[4].tableName, Where: NewWhere(WhereStr, yyDollar[5].expr)}
		}
	case 173:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1084
		{
			yyVAL.statement = &Show{Type: ShowColumnsStr, Table: yyDollar[4].tableName}
		}
	case 174:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1088
		{
			yyVAL.statement = &Show{Type: ShowCreateTableStr, Table: yyDollar[4].tableName}
		}
	case 175:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1092
		{
			yyVAL.statement = &Show{Type: ShowCreateDatabaseStr, Database: yyDollar[4].tableName}
		}
	case 176:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1096
		{
			yyVAL.statement = &Show{Type: ShowWarningsStr}
		}
	case 177:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1100
		{
			yyVAL.statement = &Show{Type: ShowVariablesStr}
		}
	case 178:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1104
		{
			yyVAL.statement = &Show{Type: ShowBinlogEventsStr, From: yyDollar[4].str, Limit: yyDollar[5].limit}
		}
	case 179:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1108
		{
			yyVAL.statement = &Show{Type: ShowStatusStr}
		}
	case 180:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1112
		{
			yyVAL.statement = &Show{Type: ShowTableStatusStr, Database: yyDollar[4].tableName}
		}
	case 181:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1117
		{
			yyVAL.str = ""
		}
	case 182:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1121
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 183:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1126
		{
			yyVAL.tableName = TableName{}
		}
	case 184:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1130
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 185:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1136
		{
			yyVAL.statement = &Checksum{Table: yyDollar[3].tableName}
		}
	case 186:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1142
		{
			yyVAL.statement = &Use{DBName: yyDollar[2].tableIdent}
		}
	case 187:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1148
		{
			yyVAL.statement = &OtherRead{}
		}
	case 188:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1152
		{
			yyVAL.statement = &OtherRead{}
		}
	case 189:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1156
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 190:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1160
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 191:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1165
		{
			setAllowComments(yylex, true)
		}
	case 192:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1169
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 193:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1175
		{
			yyVAL.bytes2 = nil
		}
	case 194:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1179
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 195:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1185
		{
			yyVAL.str = UnionStr
		}
	case 196:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1189
		{
			yyVAL.str = UnionAllStr
		}
	case 197:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1193
		{
			yyVAL.str = UnionDistinctStr
		}
	case 198:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1198
		{
			yyVAL.str = ""
		}
	case 199:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1202
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 200:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1206
		{
			yyVAL.str = SQLCacheStr
		}
	case 201:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1211
		{
			yyVAL.str = ""
		}
	case 202:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1215
		{
			yyVAL.str = DistinctStr
		}
	case 203:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1220
		{
			yyVAL.str = ""
		}
	case 204:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1224
		{
			yyVAL.str = StraightJoinHint
		}
	case 205:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1229
		{
			yyVAL.selectExprs = nil
		}
	case 206:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1233
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 207:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1239
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 208:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1243
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 209:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1249
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 210:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1253
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 211:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1257
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 212:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1261
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 213:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1266
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 214:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1270
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 215:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1274
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 217:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1281
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 218:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1286
		{
			yyVAL.tableExprs = TableExprs{&AliasedTableExpr{Expr: TableName{Name: NewTableIdent("dual")}}}
		}
	case 219:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1290
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 220:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1296
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 221:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1300
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 224:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1310
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 225:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1314
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 226:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1318
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 227:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1324
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, As: yyDollar[2].tableIdent, Hints: yyDollar[3].indexHints}
		}
	case 228:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1337
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 229:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1341
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, On: yyDollar[5].expr}
		}
	case 230:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1345
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, On: yyDollar[5].expr}
		}
	case 231:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1349
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 232:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1354
		{
			yyVAL.empty = struct{}{}
		}
	case 233:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1356
		{
			yyVAL.empty = struct{}{}
		}
	case 234:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1359
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 235:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1363
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 236:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1367
		{
			yyVAL.tableIdent = yyDollar[2].tableIdent
		}
	case 238:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1374
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 239:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1380
		{
			yyVAL.str = JoinStr
		}
	case 240:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1384
		{
			yyVAL.str = JoinStr
		}
	case 241:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1388
		{
			yyVAL.str = JoinStr
		}
	case 242:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1392
		{
			yyVAL.str = StraightJoinStr
		}
	case 243:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1398
		{
			yyVAL.str = LeftJoinStr
		}
	case 244:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1402
		{
			yyVAL.str = LeftJoinStr
		}
	case 245:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1406
		{
			yyVAL.str = RightJoinStr
		}
	case 246:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1410
		{
			yyVAL.str = RightJoinStr
		}
	case 247:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1416
		{
			yyVAL.str = NaturalJoinStr
		}
	case 248:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1420
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 249:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1430
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 250:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1434
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 251:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1440
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 252:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1444
		{
			yyVAL.tableName = TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 253:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1449
		{
			yyVAL.indexHints = nil
		}
	case 254:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1453
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].colIdents}
		}
	case 255:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1457
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].colIdents}
		}
	case 256:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1461
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].colIdents}
		}
	case 257:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1467
		{
			yyVAL.colIdents = []ColIdent{yyDollar[1].colIdent}
		}
	case 258:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1471
		{
			yyVAL.colIdents = append(yyDollar[1].colIdents, yyDollar[3].colIdent)
		}
	case 259:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1476
		{
			yyVAL.expr = nil
		}
	case 260:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1480
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 261:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1486
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 262:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1490
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 263:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1494
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 264:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1498
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 265:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1502
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 266:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1506
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 267:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1510
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 268:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1516
		{
			yyVAL.str = ""
		}
	case 269:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1520
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 270:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1526
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 271:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1530
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 272:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1536
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 273:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1540
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 274:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1544
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 275:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1548
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 276:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1552
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 277:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1556
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 278:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1560
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 279:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1564
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 280:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1568
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 281:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1572
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 282:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1578
		{
			yyVAL.str = IsNullStr
		}
	case 283:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1582
		{
			yyVAL.str = IsNotNullStr
		}
	case 284:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1586
		{
			yyVAL.str = IsTrueStr
		}
	case 285:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1590
		{
			yyVAL.str = IsNotTrueStr
		}
	case 286:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1594
		{
			yyVAL.str = IsFalseStr
		}
	case 287:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1598
		{
			yyVAL.str = IsNotFalseStr
		}
	case 288:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1604
		{
			yyVAL.str = EqualStr
		}
	case 289:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1608
		{
			yyVAL.str = LessThanStr
		}
	case 290:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1612
		{
			yyVAL.str = GreaterThanStr
		}
	case 291:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1616
		{
			yyVAL.str = LessEqualStr
		}
	case 292:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1620
		{
			yyVAL.str = GreaterEqualStr
		}
	case 293:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1624
		{
			yyVAL.str = NotEqualStr
		}
	case 294:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1628
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 295:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1633
		{
			yyVAL.expr = nil
		}
	case 296:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1637
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 297:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1643
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 298:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1647
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 299:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1651
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 300:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1657
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 301:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1663
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 302:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1667
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 303:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1673
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 304:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1677
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 305:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1681
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 306:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1685
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 307:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1689
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 308:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1693
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 309:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1697
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 310:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1701
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 311:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1705
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 312:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1709
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 313:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1713
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 314:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1717
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 315:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1721
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 316:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1725
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 317:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1729
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 318:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1733
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 319:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1737
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 320:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1741
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 321:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1745
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 322:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1749
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 323:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1753
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 324:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1757
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 325:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1765
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 326:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1779
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 327:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1783
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 328:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1787
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: yyDollar[3].colIdent}
		}
	case 333:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1805
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs}
		}
	case 334:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1809
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 335:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1813
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 336:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1823
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 337:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1827
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 338:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1831
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 339:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1835
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 340:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1839
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 341:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line sql.y:1843
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 342:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1847
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str}
		}
	case 343:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1851
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 344:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1855
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colIdent}
		}
	case 345:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1865
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 346:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1869
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 347:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1873
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 348:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1877
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 349:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1882
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 350:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1887
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 351:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1892
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 352:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1897
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 355:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1911
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 356:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1915
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 357:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1919
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 358:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1923
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 359:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1929
		{
			yyVAL.str = ""
		}
	case 360:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1933
		{
			yyVAL.str = BooleanModeStr
		}
	case 361:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1937
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 362:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1941
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 363:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1945
		{
			yyVAL.str = QueryExpansionStr
		}
	case 364:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1951
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 365:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1955
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 366:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1961
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 367:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1965
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Operator: CharacterSetStr}
		}
	case 368:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1969
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: string(yyDollar[3].bytes)}
		}
	case 369:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1973
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 370:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1977
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 371:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1981
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 372:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1987
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 373:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1991
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 374:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1995
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 375:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1999
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 376:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2003
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 377:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2007
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 378:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2011
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 379:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2016
		{
			yyVAL.expr = nil
		}
	case 380:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2020
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 381:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2025
		{
			yyVAL.str = string("")
		}
	case 382:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2029
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 383:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2035
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 384:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2039
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 385:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2045
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 386:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2050
		{
			yyVAL.expr = nil
		}
	case 387:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2054
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 388:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2060
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 389:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2064
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 390:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2068
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 391:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2074
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 392:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2078
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 393:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2082
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 394:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2086
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 395:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2090
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 396:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2094
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 397:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2098
		{
			yyVAL.expr = &NullVal{}
		}
	case 398:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2104
		{
			// TODO(sougou): Deprecate this construct.
			if yyDollar[1].colIdent.Lowered() != "value" {
				yylex.Error("expecting value after next")
				return 1
			}
			yyVAL.expr = NewIntVal([]byte("1"))
		}
	case 399:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2113
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 400:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2117
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 401:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2122
		{
			yyVAL.exprs = nil
		}
	case 402:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2126
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 403:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2131
		{
			yyVAL.expr = nil
		}
	case 404:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2135
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 405:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2140
		{
			yyVAL.orderBy = nil
		}
	case 406:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2144
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 407:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2150
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 408:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2154
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 409:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2160
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 410:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2165
		{
			yyVAL.str = AscScr
		}
	case 411:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2169
		{
			yyVAL.str = AscScr
		}
	case 412:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2173
		{
			yyVAL.str = DescScr
		}
	case 413:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2178
		{
			yyVAL.limit = nil
		}
	case 414:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2182
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 415:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2186
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 416:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2190
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 417:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2195
		{
			yyVAL.str = ""
		}
	case 418:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2199
		{
			yyVAL.str = ForUpdateStr
		}
	case 419:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2203
		{
			yyVAL.str = ShareModeStr
		}
	case 420:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2216
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 421:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2220
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 422:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2224
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Rows: yyDollar[2].selStmt}
		}
	case 423:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2229
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 424:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2233
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 425:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:2237
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].selStmt}
		}
	case 426:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2244
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 427:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2248
		{
			yyVAL.columns = Columns{yyDollar[3].colIdent}
		}
	case 428:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2252
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 429:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2256
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[5].colIdent)
		}
	case 430:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2261
		{
			yyVAL.updateExprs = nil
		}
	case 431:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2265
		{
			yyVAL.updateExprs = yyDollar[5].updateExprs
		}
	case 432:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2271
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 433:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2275
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 434:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2281
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 435:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2285
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 436:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2291
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 437:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2297
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = &ParenExpr{yyDollar[1].valTuple[0]}
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 438:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2307
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 439:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2311
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 440:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2317
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 441:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2323
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 442:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2327
		{
			yyVAL.setExprs = append(yyDollar[1].setExprs, yyDollar[3].setExpr)
		}
	case 443:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2333
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: yyDollar[3].expr}
		}
	case 444:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2337
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Expr: yyDollar[2].expr}
		}
	case 446:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2344
		{
			yyVAL.bytes = []byte("charset")
		}
	case 448:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2351
		{
			yyVAL.expr = NewStrVal([]byte(yyDollar[1].colIdent.String()))
		}
	case 449:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2355
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 450:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2359
		{
			yyVAL.expr = &Default{}
		}
	case 453:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2369
		{
			yyVAL.byt = 0
		}
	case 454:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2371
		{
			yyVAL.byt = 1
		}
	case 455:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2374
		{
			yyVAL.byt = 0
		}
	case 456:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2376
		{
			yyVAL.byt = 1
		}
	case 457:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2379
		{
			yyVAL.str = ""
		}
	case 458:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2381
		{
			yyVAL.str = IgnoreStr
		}
	case 459:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2385
		{
			yyVAL.empty = struct{}{}
		}
	case 460:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2387
		{
			yyVAL.empty = struct{}{}
		}
	case 461:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2389
		{
			yyVAL.empty = struct{}{}
		}
	case 462:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2391
		{
			yyVAL.empty = struct{}{}
		}
	case 463:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2393
		{
			yyVAL.empty = struct{}{}
		}
	case 464:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2395
		{
			yyVAL.empty = struct{}{}
		}
	case 465:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2397
		{
			yyVAL.empty = struct{}{}
		}
	case 466:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2399
		{
			yyVAL.empty = struct{}{}
		}
	case 467:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2401
		{
			yyVAL.empty = struct{}{}
		}
	case 468:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2403
		{
			yyVAL.empty = struct{}{}
		}
	case 469:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2406
		{
			yyVAL.empty = struct{}{}
		}
	case 470:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2408
		{
			yyVAL.empty = struct{}{}
		}
	case 471:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2410
		{
			yyVAL.empty = struct{}{}
		}
	case 472:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2414
		{
			yyVAL.empty = struct{}{}
		}
	case 473:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2416
		{
			yyVAL.empty = struct{}{}
		}
	case 474:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2419
		{
			yyVAL.empty = struct{}{}
		}
	case 475:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2421
		{
			yyVAL.empty = struct{}{}
		}
	case 476:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2423
		{
			yyVAL.empty = struct{}{}
		}
	case 477:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2427
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 478:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2431
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 480:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2438
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 481:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2444
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 482:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2448
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 484:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2455
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 641:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2637
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 642:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2646
		{
			decNesting(yylex)
		}
	case 643:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2651
		{
			forceEOF(yylex)
		}
	case 644:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2656
		{
			forceEOF(yylex)
		}
	case 645:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2660
		{
			forceEOF(yylex)
		}
	case 646:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2664
		{
			forceEOF(yylex)
		}
	}
	goto yystack /* stack new state and value */
}
